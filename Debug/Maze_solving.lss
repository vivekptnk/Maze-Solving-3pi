
Maze_solving.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000193a  000019ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000193a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  0080011c  0080011c  000019ea  2**0
                  ALLOC
  3 .stab         00004d7c  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007779  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0000dee1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000df24  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000b8  00000000  00000000  0000df64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000ffb  00000000  00000000  0000e01c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000009dc  00000000  00000000  0000f017  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000e1a  00000000  00000000  0000f9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000188  00000000  00000000  00010810  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000056a  00000000  00000000  00010998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000005b0  00000000  00000000  00010f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  000114b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__dtors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_9>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	9b 05       	cpc	r25, r11

0000006a <__dtors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ea e3       	ldi	r30, 0x3A	; 58
      7e:	f9 e1       	ldi	r31, 0x19	; 25
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ac 31       	cpi	r26, 0x1C	; 28
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	22 e0       	ldi	r18, 0x02	; 2
      8e:	ac e1       	ldi	r26, 0x1C	; 28
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a7 34       	cpi	r26, 0x47	; 71
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
      9c:	0e 94 87 00 	call	0x10e	; 0x10e <main>
      a0:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__do_global_dtors>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <init>:
 */

#include <pololu/3pi.h>
#include "maze_solving_algorithm.h"

void init(){
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
	unsigned int counter;
	//unsigned int sensors[5];
	
	pololu_3pi_init(2000);
      ac:	80 ed       	ldi	r24, 0xD0	; 208
      ae:	97 e0       	ldi	r25, 0x07	; 7
      b0:	0e 94 97 05 	call	0xb2e	; 0xb2e <pololu_3pi_init>
	
	wait_for_button_release(BUTTON_B);
      b4:	80 e1       	ldi	r24, 0x10	; 16
      b6:	0e 94 aa 04 	call	0x954	; 0x954 <wait_for_button_release>
	delay_ms(1000);
      ba:	88 ee       	ldi	r24, 0xE8	; 232
      bc:	93 e0       	ldi	r25, 0x03	; 3
      be:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
      c2:	cc ee       	ldi	r28, 0xEC	; 236
      c4:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0; counter<80; counter++){
		if(counter < 20 || counter >= 60){
      c6:	c8 32       	cpi	r28, 0x28	; 40
      c8:	d1 05       	cpc	r29, r1
      ca:	38 f0       	brcs	.+14     	; 0xda <init+0x32>
			set_motors(40,-40);
      cc:	68 ed       	ldi	r22, 0xD8	; 216
      ce:	7f ef       	ldi	r23, 0xFF	; 255
      d0:	88 e2       	ldi	r24, 0x28	; 40
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
      d8:	06 c0       	rjmp	.+12     	; 0xe6 <init+0x3e>
		} else {
			set_motors(-40,40);
      da:	68 e2       	ldi	r22, 0x28	; 40
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	88 ed       	ldi	r24, 0xD8	; 216
      e0:	9f ef       	ldi	r25, 0xFF	; 255
      e2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
		}
		
		calibrate_line_sensors(IR_EMITTERS_ON);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	0e 94 5b 05 	call	0xab6	; 0xab6 <calibrate_line_sensors>
		delay_ms(20);
      ec:	84 e1       	ldi	r24, 0x14	; 20
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
      f4:	21 96       	adiw	r28, 0x01	; 1
	pololu_3pi_init(2000);
	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);
	
	for(counter=0; counter<80; counter++){
      f6:	cc 33       	cpi	r28, 0x3C	; 60
      f8:	d1 05       	cpc	r29, r1
      fa:	29 f7       	brne	.-54     	; 0xc6 <init+0x1e>
		}
		
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	set_motors(0,0);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
}
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	08 95       	ret

0000010e <main>:


int main()
{
	init();
     10e:	0e 94 54 00 	call	0xa8	; 0xa8 <init>
	
	maze_solving_algorithm();
     112:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <maze_solving_algorithm>
     116:	ff cf       	rjmp	.-2      	; 0x116 <main+0x8>

00000118 <turn_detection>:
char path_tracker[200] = "";
unsigned char path_length = 0;

char turn_detection(unsigned char left_detect, unsigned char right_detect, unsigned char straight_detect){
	//we will use left-hand-on-the-wall strategy
	if(left_detect)
     118:	81 11       	cpse	r24, r1
     11a:	06 c0       	rjmp	.+12     	; 0x128 <turn_detection+0x10>
		return 'L';
	else if(straight_detect)
     11c:	41 11       	cpse	r20, r1
     11e:	06 c0       	rjmp	.+12     	; 0x12c <turn_detection+0x14>
		return 'S';
	else if(right_detect)
     120:	61 11       	cpse	r22, r1
     122:	06 c0       	rjmp	.+12     	; 0x130 <turn_detection+0x18>
		return 'R';
	else
		return 'B';
     124:	82 e4       	ldi	r24, 0x42	; 66
     126:	08 95       	ret
unsigned char path_length = 0;

char turn_detection(unsigned char left_detect, unsigned char right_detect, unsigned char straight_detect){
	//we will use left-hand-on-the-wall strategy
	if(left_detect)
		return 'L';
     128:	8c e4       	ldi	r24, 0x4C	; 76
     12a:	08 95       	ret
	else if(straight_detect)
		return 'S';
     12c:	83 e5       	ldi	r24, 0x53	; 83
     12e:	08 95       	ret
	else if(right_detect)
		return 'R';
     130:	82 e5       	ldi	r24, 0x52	; 82
	else
		return 'B';
}
     132:	08 95       	ret

00000134 <optimize_path>:



//we can optimize the path by eliminating dead ends (making U turns can be avoided)
void optimize_path(){
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
	
	if(path_length<3 || path_tracker[path_length-2] != 'B'){
     138:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <path_length>
     13c:	23 30       	cpi	r18, 0x03	; 3
     13e:	08 f4       	brcc	.+2      	; 0x142 <optimize_path+0xe>
     140:	4d c0       	rjmp	.+154    	; 0x1dc <optimize_path+0xa8>
     142:	c2 2f       	mov	r28, r18
     144:	d0 e0       	ldi	r29, 0x00	; 0
     146:	fe 01       	movw	r30, r28
     148:	eb 58       	subi	r30, 0x8B	; 139
     14a:	fe 4f       	sbci	r31, 0xFE	; 254
     14c:	80 81       	ld	r24, Z
     14e:	82 34       	cpi	r24, 0x42	; 66
     150:	09 f0       	breq	.+2      	; 0x154 <optimize_path+0x20>
     152:	44 c0       	rjmp	.+136    	; 0x1dc <optimize_path+0xa8>
     154:	ae 01       	movw	r20, r28
     156:	fa 01       	movw	r30, r20
     158:	e8 58       	subi	r30, 0x88	; 136
     15a:	fe 4f       	sbci	r31, 0xFE	; 254
     15c:	4c 58       	subi	r20, 0x8C	; 140
     15e:	5e 4f       	sbci	r21, 0xFE	; 254
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
	
	int angle = 0;
	int i;
	
	for(i=0; i<=3; i++){
		switch(path_tracker[path_length-i]){
     164:	92 91       	ld	r25, -Z
     166:	9c 34       	cpi	r25, 0x4C	; 76
     168:	41 f0       	breq	.+16     	; 0x17a <optimize_path+0x46>
     16a:	92 35       	cpi	r25, 0x52	; 82
     16c:	19 f0       	breq	.+6      	; 0x174 <optimize_path+0x40>
     16e:	92 34       	cpi	r25, 0x42	; 66
     170:	49 f4       	brne	.+18     	; 0x184 <optimize_path+0x50>
     172:	06 c0       	rjmp	.+12     	; 0x180 <optimize_path+0x4c>
			case 'R':
			angle = angle + 90;
     174:	66 5a       	subi	r22, 0xA6	; 166
     176:	7f 4f       	sbci	r23, 0xFF	; 255
			break;
     178:	05 c0       	rjmp	.+10     	; 0x184 <optimize_path+0x50>
			case 'L':
			angle = angle + 270;
     17a:	62 5f       	subi	r22, 0xF2	; 242
     17c:	7e 4f       	sbci	r23, 0xFE	; 254
			break;
     17e:	02 c0       	rjmp	.+4      	; 0x184 <optimize_path+0x50>
			case 'B':
			angle = angle + 180;
     180:	6c 54       	subi	r22, 0x4C	; 76
     182:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	
	int angle = 0;
	int i;
	
	for(i=0; i<=3; i++){
     184:	e4 17       	cp	r30, r20
     186:	f5 07       	cpc	r31, r21
     188:	69 f7       	brne	.-38     	; 0x164 <optimize_path+0x30>
	
	// angle should remain between 0 to 360
	angle = angle % 360;
	
	//optimizing the turns with a single turn
	switch(angle){
     18a:	cb 01       	movw	r24, r22
     18c:	68 e6       	ldi	r22, 0x68	; 104
     18e:	71 e0       	ldi	r23, 0x01	; 1
     190:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__divmodhi4>
     194:	8a 35       	cpi	r24, 0x5A	; 90
     196:	91 05       	cpc	r25, r1
     198:	81 f0       	breq	.+32     	; 0x1ba <optimize_path+0x86>
     19a:	1c f4       	brge	.+6      	; 0x1a2 <optimize_path+0x6e>
     19c:	89 2b       	or	r24, r25
     19e:	d9 f4       	brne	.+54     	; 0x1d6 <optimize_path+0xa2>
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <optimize_path+0x7c>
     1a2:	84 3b       	cpi	r24, 0xB4	; 180
     1a4:	91 05       	cpc	r25, r1
     1a6:	71 f0       	breq	.+28     	; 0x1c4 <optimize_path+0x90>
     1a8:	8e 30       	cpi	r24, 0x0E	; 14
     1aa:	91 40       	sbci	r25, 0x01	; 1
     1ac:	81 f0       	breq	.+32     	; 0x1ce <optimize_path+0x9a>
     1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <optimize_path+0xa2>
		case 0:
		path_tracker[path_length-3] = 'S';
     1b0:	cc 58       	subi	r28, 0x8C	; 140
     1b2:	de 4f       	sbci	r29, 0xFE	; 254
     1b4:	83 e5       	ldi	r24, 0x53	; 83
     1b6:	88 83       	st	Y, r24
		break;
     1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <optimize_path+0xa2>
		case 90:
		path_tracker[path_length-3] = 'R';
     1ba:	cc 58       	subi	r28, 0x8C	; 140
     1bc:	de 4f       	sbci	r29, 0xFE	; 254
     1be:	82 e5       	ldi	r24, 0x52	; 82
     1c0:	88 83       	st	Y, r24
		break;
     1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <optimize_path+0xa2>
		case 180:
		path_tracker[path_length-3] = 'B';
     1c4:	cc 58       	subi	r28, 0x8C	; 140
     1c6:	de 4f       	sbci	r29, 0xFE	; 254
     1c8:	82 e4       	ldi	r24, 0x42	; 66
     1ca:	88 83       	st	Y, r24
		break;
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <optimize_path+0xa2>
		case 270:
		path_tracker[path_length-3] = 'L';
     1ce:	cc 58       	subi	r28, 0x8C	; 140
     1d0:	de 4f       	sbci	r29, 0xFE	; 254
     1d2:	8c e4       	ldi	r24, 0x4C	; 76
     1d4:	88 83       	st	Y, r24
		break;
	}
	
	//since path is now shorter by 2 steps
	path_length = path_length -2 ;
     1d6:	22 50       	subi	r18, 0x02	; 2
     1d8:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <path_length>
}
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <maze_solving_algorithm>:


//maze solver
void maze_solving_algorithm(){
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
		//calibrating the surface by moving ahead slowly
		set_motors(50,50);
		delay_ms(50);
		
		//variables to keep track of the intersections
		unsigned char left_detect = 0;
     1f6:	10 e0       	ldi	r17, 0x00	; 0


//maze solver
void maze_solving_algorithm(){
	while(1){
		PID_handling();
     1f8:	0e 94 b7 01 	call	0x36e	; 0x36e <PID_handling>
		
		//calibrating the surface by moving ahead slowly
		set_motors(50,50);
     1fc:	62 e3       	ldi	r22, 0x32	; 50
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	82 e3       	ldi	r24, 0x32	; 50
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
		delay_ms(50);
     208:	82 e3       	ldi	r24, 0x32	; 50
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
		unsigned char straight_detect = 0;
		unsigned char right_detect = 0;
		
		//read line sensors
		unsigned sensors[5];
		read_line(sensors, IR_EMITTERS_ON);
     210:	61 e0       	ldi	r22, 0x01	; 1
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	0e 94 61 05 	call	0xac2	; 0xac2 <read_line>
		//calibrating the surface by moving ahead slowly
		set_motors(50,50);
		delay_ms(50);
		
		//variables to keep track of the intersections
		unsigned char left_detect = 0;
     21a:	01 e0       	ldi	r16, 0x01	; 1
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	9a 81       	ldd	r25, Y+2	; 0x02
     220:	85 36       	cpi	r24, 0x65	; 101
     222:	91 05       	cpc	r25, r1
     224:	08 f4       	brcc	.+2      	; 0x228 <maze_solving_algorithm+0x46>
     226:	01 2f       	mov	r16, r17
		unsigned char straight_detect = 0;
		unsigned char right_detect = 0;
     228:	ff 24       	eor	r15, r15
     22a:	f3 94       	inc	r15
     22c:	89 85       	ldd	r24, Y+9	; 0x09
     22e:	9a 85       	ldd	r25, Y+10	; 0x0a
     230:	85 36       	cpi	r24, 0x65	; 101
     232:	91 05       	cpc	r25, r1
     234:	08 f4       	brcc	.+2      	; 0x238 <maze_solving_algorithm+0x56>
     236:	f1 2e       	mov	r15, r17
		
		if(sensors[4]>100){
			right_detect = 1;
		}
		
		set_motors(40,40);
     238:	68 e2       	ldi	r22, 0x28	; 40
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	88 e2       	ldi	r24, 0x28	; 40
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
		delay_ms(200);
     244:	88 ec       	ldi	r24, 0xC8	; 200
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
		
		
		//check if straight exists
		if(sensors[1]>200 || sensors[2]>200 || sensors[3]>200){
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	9c 81       	ldd	r25, Y+4	; 0x04
     250:	89 3c       	cpi	r24, 0xC9	; 201
     252:	91 05       	cpc	r25, r1
     254:	68 f4       	brcc	.+26     	; 0x270 <maze_solving_algorithm+0x8e>
     256:	2d 81       	ldd	r18, Y+5	; 0x05
     258:	3e 81       	ldd	r19, Y+6	; 0x06
     25a:	29 3c       	cpi	r18, 0xC9	; 201
     25c:	31 05       	cpc	r19, r1
     25e:	50 f4       	brcc	.+20     	; 0x274 <maze_solving_algorithm+0x92>
		set_motors(50,50);
		delay_ms(50);
		
		//variables to keep track of the intersections
		unsigned char left_detect = 0;
		unsigned char straight_detect = 0;
     260:	41 e0       	ldi	r20, 0x01	; 1
     262:	2f 81       	ldd	r18, Y+7	; 0x07
     264:	38 85       	ldd	r19, Y+8	; 0x08
     266:	29 3c       	cpi	r18, 0xC9	; 201
     268:	31 05       	cpc	r19, r1
     26a:	28 f4       	brcc	.+10     	; 0x276 <maze_solving_algorithm+0x94>
     26c:	41 2f       	mov	r20, r17
     26e:	03 c0       	rjmp	.+6      	; 0x276 <maze_solving_algorithm+0x94>
		delay_ms(200);
		
		
		//check if straight exists
		if(sensors[1]>200 || sensors[2]>200 || sensors[3]>200){
			straight_detect = 1;
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	01 c0       	rjmp	.+2      	; 0x276 <maze_solving_algorithm+0x94>
     274:	41 e0       	ldi	r20, 0x01	; 1
		}
		
		if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600){
     276:	89 35       	cpi	r24, 0x59	; 89
     278:	92 40       	sbci	r25, 0x02	; 2
     27a:	50 f0       	brcs	.+20     	; 0x290 <maze_solving_algorithm+0xae>
     27c:	8d 81       	ldd	r24, Y+5	; 0x05
     27e:	9e 81       	ldd	r25, Y+6	; 0x06
     280:	89 35       	cpi	r24, 0x59	; 89
     282:	92 40       	sbci	r25, 0x02	; 2
     284:	28 f0       	brcs	.+10     	; 0x290 <maze_solving_algorithm+0xae>
     286:	8f 81       	ldd	r24, Y+7	; 0x07
     288:	98 85       	ldd	r25, Y+8	; 0x08
     28a:	89 35       	cpi	r24, 0x59	; 89
     28c:	92 40       	sbci	r25, 0x02	; 2
     28e:	48 f4       	brcc	.+18     	; 0x2a2 <maze_solving_algorithm+0xc0>
			break;
		}
		
		//intersection identified
		unsigned char direction = turn_detection(left_detect, right_detect, straight_detect);
     290:	6f 2d       	mov	r22, r15
     292:	80 2f       	mov	r24, r16
     294:	0e 94 8c 00 	call	0x118	; 0x118 <turn_detection>
		
		//use the turn_control function to make the right turn
		turn_control(direction);
     298:	0e 94 65 02 	call	0x4ca	; 0x4ca <turn_control>
		
		// use optimize_path() function to make the path more efficient 
		optimize_path();	
     29c:	0e 94 9a 00 	call	0x134	; 0x134 <optimize_path>
		
	}
     2a0:	ab cf       	rjmp	.-170    	; 0x1f8 <maze_solving_algorithm+0x16>
	while(1){
		
		
		//wait for button to be pressed
		while(button_is_pressed(BUTTON_B)){
			if(get_ms() % 2000 < 1000){
     2a2:	0f 2e       	mov	r0, r31
     2a4:	f0 ed       	ldi	r31, 0xD0	; 208
     2a6:	8f 2e       	mov	r8, r31
     2a8:	f7 e0       	ldi	r31, 0x07	; 7
     2aa:	9f 2e       	mov	r9, r31
     2ac:	a1 2c       	mov	r10, r1
     2ae:	b1 2c       	mov	r11, r1
     2b0:	f0 2d       	mov	r31, r0
     2b2:	1d c0       	rjmp	.+58     	; 0x2ee <maze_solving_algorithm+0x10c>
     2b4:	0e 94 41 05 	call	0xa82	; 0xa82 <get_ms>
     2b8:	a5 01       	movw	r20, r10
     2ba:	94 01       	movw	r18, r8
     2bc:	0e 94 cf 0a 	call	0x159e	; 0x159e <__udivmodsi4>
     2c0:	68 3e       	cpi	r22, 0xE8	; 232
     2c2:	73 40       	sbci	r23, 0x03	; 3
     2c4:	81 05       	cpc	r24, r1
     2c6:	91 05       	cpc	r25, r1
     2c8:	70 f4       	brcc	.+28     	; 0x2e6 <maze_solving_algorithm+0x104>
				clear();
     2ca:	0e 94 93 03 	call	0x726	; 0x726 <clear>
				print("solved");
     2ce:	8d e0       	ldi	r24, 0x0D	; 13
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 a2 03 	call	0x744	; 0x744 <print>
				lcd_goto_xy(0,1);
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 c5 03 	call	0x78a	; 0x78a <lcd_goto_xy>
				print("Press B");
     2de:	84 e1       	ldi	r24, 0x14	; 20
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 a2 03 	call	0x744	; 0x744 <print>
			}
			
			delay_ms(30);
     2e6:	8e e1       	ldi	r24, 0x1E	; 30
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
	//loop to run maze infinite times
	while(1){
		
		
		//wait for button to be pressed
		while(button_is_pressed(BUTTON_B)){
     2ee:	80 e1       	ldi	r24, 0x10	; 16
     2f0:	0e 94 be 04 	call	0x97c	; 0x97c <button_is_pressed>
     2f4:	81 11       	cpse	r24, r1
     2f6:	de cf       	rjmp	.-68     	; 0x2b4 <maze_solving_algorithm+0xd2>
			}
			
			delay_ms(30);
		}
		
		while(button_is_pressed(BUTTON_B));
     2f8:	80 e1       	ldi	r24, 0x10	; 16
     2fa:	0e 94 be 04 	call	0x97c	; 0x97c <button_is_pressed>
     2fe:	81 11       	cpse	r24, r1
     300:	fb cf       	rjmp	.-10     	; 0x2f8 <maze_solving_algorithm+0x116>
		
		delay_ms(1000);
     302:	88 ee       	ldi	r24, 0xE8	; 232
     304:	93 e0       	ldi	r25, 0x03	; 3
     306:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
		
		
		int i;
		for(i=0; i<path_length; i++){
     30a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <path_length>
     30e:	88 23       	and	r24, r24
     310:	59 f1       	breq	.+86     	; 0x368 <maze_solving_algorithm+0x186>
     312:	0f 2e       	mov	r0, r31
     314:	f7 e7       	ldi	r31, 0x77	; 119
     316:	ef 2e       	mov	r14, r31
     318:	f1 e0       	ldi	r31, 0x01	; 1
     31a:	ff 2e       	mov	r15, r31
     31c:	f0 2d       	mov	r31, r0
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	10 e0       	ldi	r17, 0x00	; 0
			PID_handling();
     322:	0e 94 b7 01 	call	0x36e	; 0x36e <PID_handling>
			
			//going straight slowly 
			set_motors(50,50);
     326:	62 e3       	ldi	r22, 0x32	; 50
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	82 e3       	ldi	r24, 0x32	; 50
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
			delay_ms(50);
     332:	82 e3       	ldi	r24, 0x32	; 50
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
			set_motors(40,40);
     33a:	68 e2       	ldi	r22, 0x28	; 40
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	88 e2       	ldi	r24, 0x28	; 40
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
			delay_ms(200);
     346:	88 ec       	ldi	r24, 0xC8	; 200
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
			
			turn_control(path_tracker[i]);
     34e:	f7 01       	movw	r30, r14
     350:	81 91       	ld	r24, Z+
     352:	7f 01       	movw	r14, r30
     354:	0e 94 65 02 	call	0x4ca	; 0x4ca <turn_control>
		
		delay_ms(1000);
		
		
		int i;
		for(i=0; i<path_length; i++){
     358:	0f 5f       	subi	r16, 0xFF	; 255
     35a:	1f 4f       	sbci	r17, 0xFF	; 255
     35c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <path_length>
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	08 17       	cp	r16, r24
     364:	19 07       	cpc	r17, r25
     366:	ec f2       	brlt	.-70     	; 0x322 <maze_solving_algorithm+0x140>
			
			turn_control(path_tracker[i]);
			
		}
		
		PID_handling();
     368:	0e 94 b7 01 	call	0x36e	; 0x36e <PID_handling>
	}
     36c:	c0 cf       	rjmp	.-128    	; 0x2ee <maze_solving_algorithm+0x10c>

0000036e <PID_handling>:
 * Created: 4/19/2020 1:29:45 AM
 *  Author: vivek
 */ 
#include <pololu/3pi.h>

void PID_handling(){
     36e:	2f 92       	push	r2
     370:	3f 92       	push	r3
     372:	4f 92       	push	r4
     374:	5f 92       	push	r5
     376:	6f 92       	push	r6
     378:	7f 92       	push	r7
     37a:	8f 92       	push	r8
     37c:	9f 92       	push	r9
     37e:	af 92       	push	r10
     380:	bf 92       	push	r11
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	2a 97       	sbiw	r28, 0x0a	; 10
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
	long integral_value = 0;
	int final_proportional = 0;
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	10 e0       	ldi	r17, 0x00	; 0
 *  Author: vivek
 */ 
#include <pololu/3pi.h>

void PID_handling(){
	long integral_value = 0;
     3a6:	81 2c       	mov	r8, r1
     3a8:	91 2c       	mov	r9, r1
     3aa:	54 01       	movw	r10, r8
		
		//Store the final position
		final_proportional = current_proportional;
		
		//Speed Handling among the motors
		int power_difference = current_proportional/20 + integral_value/10000 + current_deriviative*3/2;
     3ac:	0f 2e       	mov	r0, r31
     3ae:	f0 e1       	ldi	r31, 0x10	; 16
     3b0:	4f 2e       	mov	r4, r31
     3b2:	f7 e2       	ldi	r31, 0x27	; 39
     3b4:	5f 2e       	mov	r5, r31
     3b6:	61 2c       	mov	r6, r1
     3b8:	71 2c       	mov	r7, r1
     3ba:	f0 2d       	mov	r31, r0
     3bc:	0f 2e       	mov	r0, r31
     3be:	f4 e1       	ldi	r31, 0x14	; 20
     3c0:	cf 2e       	mov	r12, r31
     3c2:	d1 2c       	mov	r13, r1
     3c4:	f0 2d       	mov	r31, r0
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f4 ec       	ldi	r31, 0xC4	; 196
     3ca:	3f 2e       	mov	r3, r31
     3cc:	f0 2d       	mov	r31, r0
     3ce:	22 24       	eor	r2, r2
     3d0:	2a 94       	dec	r2
	
	
	//basically line following code 
	while(1){
		unsigned int sensors[5];
		unsigned int position  = read_line(sensors, IR_EMITTERS_ON);
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	0e 94 61 05 	call	0xac2	; 0xac2 <read_line>
		
		//Computing the P in PID
		//Should be zero when on line. 
		int current_proportional = ((int)position) - 2000;
     3dc:	80 5d       	subi	r24, 0xD0	; 208
     3de:	97 40       	sbci	r25, 0x07	; 7
     3e0:	7c 01       	movw	r14, r24
		
		//Computing the D in PID
		int current_deriviative = current_proportional - final_proportional;
		
		//Computing I in PID
		integral_value = integral_value + current_proportional;
     3e2:	09 2e       	mov	r0, r25
     3e4:	00 0c       	add	r0, r0
     3e6:	aa 0b       	sbc	r26, r26
     3e8:	bb 0b       	sbc	r27, r27
     3ea:	88 0e       	add	r8, r24
     3ec:	99 1e       	adc	r9, r25
     3ee:	aa 1e       	adc	r10, r26
     3f0:	bb 1e       	adc	r11, r27
		
		//Store the final position
		final_proportional = current_proportional;
		
		//Speed Handling among the motors
		int power_difference = current_proportional/20 + integral_value/10000 + current_deriviative*3/2;
     3f2:	c7 01       	movw	r24, r14
     3f4:	80 1b       	sub	r24, r16
     3f6:	91 0b       	sbc	r25, r17
     3f8:	8c 01       	movw	r16, r24
     3fa:	00 0f       	add	r16, r16
     3fc:	11 1f       	adc	r17, r17
     3fe:	08 0f       	add	r16, r24
     400:	19 1f       	adc	r17, r25
     402:	11 23       	and	r17, r17
     404:	14 f4       	brge	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     406:	0f 5f       	subi	r16, 0xFF	; 255
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	15 95       	asr	r17
     40c:	07 95       	ror	r16
     40e:	c5 01       	movw	r24, r10
     410:	b4 01       	movw	r22, r8
     412:	a3 01       	movw	r20, r6
     414:	92 01       	movw	r18, r4
     416:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divmodsi4>
     41a:	20 0f       	add	r18, r16
     41c:	31 1f       	adc	r19, r17
     41e:	c7 01       	movw	r24, r14
     420:	b6 01       	movw	r22, r12
     422:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__divmodhi4>
     426:	26 0f       	add	r18, r22
     428:	37 1f       	adc	r19, r23
     42a:	2d 33       	cpi	r18, 0x3D	; 61
     42c:	31 05       	cpc	r19, r1
     42e:	14 f0       	brlt	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	2c e3       	ldi	r18, 0x3C	; 60
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	c9 01       	movw	r24, r18
     436:	84 3c       	cpi	r24, 0xC4	; 196
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	92 07       	cpc	r25, r18
     43c:	14 f4       	brge	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	83 2d       	mov	r24, r3
     440:	92 2d       	mov	r25, r2
		if(power_difference > max_speed)
			power_difference = max_speed;
		if(power_difference < -max_speed)
			power_difference = -max_speed;
			
		if(power_difference < 0)
     442:	99 23       	and	r25, r25
     444:	34 f4       	brge	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			set_motors(max_speed+power_difference, max_speed);
     446:	6c e3       	ldi	r22, 0x3C	; 60
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	cc 96       	adiw	r24, 0x3c	; 60
     44c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
     450:	08 c0       	rjmp	.+16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		else 
			set_motors(max_speed, max_speed-power_difference);
     452:	6c e3       	ldi	r22, 0x3C	; 60
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	68 1b       	sub	r22, r24
     458:	79 0b       	sbc	r23, r25
     45a:	8c e3       	ldi	r24, 0x3C	; 60
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
		
		// Inner Sensors, 2,3,4 (basically sensors[1], sensors[2], sensor[3])will be used to detect if the line is straight
		// and sensors 1(sensors[0]) and 5(sensors[4]) will be detecting if the lines are going left or right. 
		if(sensors[1]<100 && sensors[2]<100 && sensors[3]<100){
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	9c 81       	ldd	r25, Y+4	; 0x04
     466:	84 36       	cpi	r24, 0x64	; 100
     468:	91 05       	cpc	r25, r1
     46a:	50 f4       	brcc	.+20     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     46c:	8d 81       	ldd	r24, Y+5	; 0x05
     46e:	9e 81       	ldd	r25, Y+6	; 0x06
     470:	84 36       	cpi	r24, 0x64	; 100
     472:	91 05       	cpc	r25, r1
     474:	28 f4       	brcc	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     476:	8f 81       	ldd	r24, Y+7	; 0x07
     478:	98 85       	ldd	r25, Y+8	; 0x08
     47a:	84 36       	cpi	r24, 0x64	; 100
     47c:	91 05       	cpc	r25, r1
     47e:	50 f0       	brcs	.+20     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			//no line 
			//its probably an dead end
		} else if(sensors[0]>200 || sensors[4]>200){
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	89 3c       	cpi	r24, 0xC9	; 201
     486:	91 05       	cpc	r25, r1
     488:	38 f4       	brcc	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     48a:	89 85       	ldd	r24, Y+9	; 0x09
     48c:	9a 85       	ldd	r25, Y+10	; 0x0a
     48e:	89 3c       	cpi	r24, 0xC9	; 201
     490:	91 05       	cpc	r25, r1
     492:	10 f4       	brcc	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		
		//Computing I in PID
		integral_value = integral_value + current_proportional;
		
		//Store the final position
		final_proportional = current_proportional;
     494:	87 01       	movw	r16, r14
		} else if(sensors[0]>200 || sensors[4]>200){
			//its an intersection
			return;
		}
		
	}
     496:	9d cf       	rjmp	.-198    	; 0x3d2 <PID_handling+0x64>
     498:	2a 96       	adiw	r28, 0x0a	; 10
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	bf 90       	pop	r11
     4b6:	af 90       	pop	r10
     4b8:	9f 90       	pop	r9
     4ba:	8f 90       	pop	r8
     4bc:	7f 90       	pop	r7
     4be:	6f 90       	pop	r6
     4c0:	5f 90       	pop	r5
     4c2:	4f 90       	pop	r4
     4c4:	3f 90       	pop	r3
     4c6:	2f 90       	pop	r2
     4c8:	08 95       	ret

000004ca <turn_control>:
#include <pololu/3pi.h>

void turn_control(char direction){
	switch(direction)
     4ca:	8c 34       	cpi	r24, 0x4C	; 76
     4cc:	29 f0       	breq	.+10     	; 0x4d8 <turn_control+0xe>
     4ce:	82 35       	cpi	r24, 0x52	; 82
     4d0:	71 f0       	breq	.+28     	; 0x4ee <turn_control+0x24>
     4d2:	82 34       	cpi	r24, 0x42	; 66
     4d4:	09 f5       	brne	.+66     	; 0x518 <turn_control+0x4e>
     4d6:	16 c0       	rjmp	.+44     	; 0x504 <turn_control+0x3a>
	{
		case 'L':
			//turn left
			set_motors(-80,80);
     4d8:	60 e5       	ldi	r22, 0x50	; 80
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 eb       	ldi	r24, 0xB0	; 176
     4de:	9f ef       	ldi	r25, 0xFF	; 255
     4e0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
			delay_ms(200);
     4e4:	88 ec       	ldi	r24, 0xC8	; 200
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
			break;
     4ec:	08 95       	ret
		
		case 'R':
			//turn right 
			set_motors(80,-80);
     4ee:	60 eb       	ldi	r22, 0xB0	; 176
     4f0:	7f ef       	ldi	r23, 0xFF	; 255
     4f2:	80 e5       	ldi	r24, 0x50	; 80
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     4fa:	88 ec       	ldi	r24, 0xC8	; 200
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     502:	08 95       	ret
			delay(200);
			break;
			
		case 'B':
			//turn back 
			set_motors(80,-80);
     504:	60 eb       	ldi	r22, 0xB0	; 176
     506:	7f ef       	ldi	r23, 0xFF	; 255
     508:	80 e5       	ldi	r24, 0x50	; 80
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motors>
			delay_ms(400);
     510:	80 e9       	ldi	r24, 0x90	; 144
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     518:	08 95       	ret

0000051a <delay_us.constprop.0>:
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	6f 93       	push	r22
     520:	64 e0       	ldi	r22, 0x04	; 4
     522:	6a 95       	dec	r22
     524:	f1 f7       	brne	.-4      	; 0x522 <delay_us.constprop.0+0x8>
     526:	6f 91       	pop	r22
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	c9 f7       	brne	.-14     	; 0x51e <delay_us.constprop.0+0x4>
     52c:	08 95       	ret

0000052e <_ZN12OrangutanLCD8busyWaitEv>:
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	1a b1       	in	r17, 0x0a	; 10
     538:	57 98       	cbi	0x0a, 7	; 10
     53a:	5a 98       	cbi	0x0b, 2	; 11
     53c:	28 9a       	sbi	0x05, 0	; 5
     53e:	c0 e0       	ldi	r28, 0x00	; 0
     540:	d0 e0       	ldi	r29, 0x00	; 0
     542:	0e 94 8d 02 	call	0x51a	; 0x51a <delay_us.constprop.0>
     546:	5c 9a       	sbi	0x0b, 4	; 11
     548:	0e 94 8d 02 	call	0x51a	; 0x51a <delay_us.constprop.0>
     54c:	09 b1       	in	r16, 0x09	; 9
     54e:	5c 98       	cbi	0x0b, 4	; 11
     550:	0e 94 8d 02 	call	0x51a	; 0x51a <delay_us.constprop.0>
     554:	5c 9a       	sbi	0x0b, 4	; 11
     556:	0e 94 8d 02 	call	0x51a	; 0x51a <delay_us.constprop.0>
     55a:	5c 98       	cbi	0x0b, 4	; 11
     55c:	24 96       	adiw	r28, 0x04	; 4
     55e:	07 ff       	sbrs	r16, 7
     560:	10 c0       	rjmp	.+32     	; 0x582 <_ZN12OrangutanLCD8busyWaitEv+0x54>
     562:	ae 01       	movw	r20, r28
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     56c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     570:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__data_end+0x2>
     574:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__data_end+0x3>
     578:	48 17       	cp	r20, r24
     57a:	59 07       	cpc	r21, r25
     57c:	6a 07       	cpc	r22, r26
     57e:	7b 07       	cpc	r23, r27
     580:	00 f3       	brcs	.-64     	; 0x542 <_ZN12OrangutanLCD8busyWaitEv+0x14>
     582:	1a b9       	out	0x0a, r17	; 10
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <_ZN12OrangutanLCD8sendDataEh>:
     58e:	95 b1       	in	r25, 0x05	; 5
     590:	28 2f       	mov	r18, r24
     592:	21 70       	andi	r18, 0x01	; 1
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	48 2f       	mov	r20, r24
     59c:	46 70       	andi	r20, 0x06	; 6
     59e:	68 e0       	ldi	r22, 0x08	; 8
     5a0:	46 9f       	mul	r20, r22
     5a2:	a0 01       	movw	r20, r0
     5a4:	11 24       	eor	r1, r1
     5a6:	24 2b       	or	r18, r20
     5a8:	9d 7c       	andi	r25, 0xCD	; 205
     5aa:	29 2b       	or	r18, r25
     5ac:	25 b9       	out	0x05, r18	; 5
     5ae:	9b b1       	in	r25, 0x0b	; 11
     5b0:	88 70       	andi	r24, 0x08	; 8
     5b2:	82 95       	swap	r24
     5b4:	80 7f       	andi	r24, 0xF0	; 240
     5b6:	9f 77       	andi	r25, 0x7F	; 127
     5b8:	89 2b       	or	r24, r25
     5ba:	8b b9       	out	0x0b, r24	; 11
     5bc:	5c 9a       	sbi	0x0b, 4	; 11
     5be:	0e 94 8d 02 	call	0x51a	; 0x51a <delay_us.constprop.0>
     5c2:	5c 98       	cbi	0x0b, 4	; 11
     5c4:	0e 94 8d 02 	call	0x51a	; 0x51a <delay_us.constprop.0>
     5c8:	08 95       	ret

000005ca <_ZN12OrangutanLCD4sendEhhh>:
     5ca:	a0 e0       	ldi	r26, 0x00	; 0
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	eb ee       	ldi	r30, 0xEB	; 235
     5d0:	f2 e0       	ldi	r31, 0x02	; 2
     5d2:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x16>
     5d6:	c8 2f       	mov	r28, r24
     5d8:	d6 2e       	mov	r13, r22
     5da:	e4 2e       	mov	r14, r20
     5dc:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZZN12OrangutanLCD4initEvE11initialized>
     5e0:	81 11       	cpse	r24, r1
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <_ZN12OrangutanLCD4sendEhhh+0x24>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <_ZZN12OrangutanLCD4initEvE11initialized>
     5ea:	0e 94 2b 03 	call	0x656	; 0x656 <_ZN12OrangutanLCD5init2Ev>
     5ee:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN12OrangutanLCD8busyWaitEv>
     5f2:	14 b1       	in	r17, 0x04	; 4
     5f4:	d5 b1       	in	r29, 0x05	; 5
     5f6:	fa b0       	in	r15, 0x0a	; 10
     5f8:	0b b1       	in	r16, 0x0b	; 11
     5fa:	28 98       	cbi	0x05, 0	; 5
     5fc:	dd 20       	and	r13, r13
     5fe:	11 f0       	breq	.+4      	; 0x604 <_ZN12OrangutanLCD4sendEhhh+0x3a>
     600:	5a 9a       	sbi	0x0b, 2	; 11
     602:	01 c0       	rjmp	.+2      	; 0x606 <_ZN12OrangutanLCD4sendEhhh+0x3c>
     604:	5a 98       	cbi	0x0b, 2	; 11
     606:	94 b1       	in	r25, 0x04	; 4
     608:	92 63       	ori	r25, 0x32	; 50
     60a:	94 b9       	out	0x04, r25	; 4
     60c:	57 9a       	sbi	0x0a, 7	; 10
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	e8 16       	cp	r14, r24
     612:	29 f0       	breq	.+10     	; 0x61e <_ZN12OrangutanLCD4sendEhhh+0x54>
     614:	8c 2f       	mov	r24, r28
     616:	82 95       	swap	r24
     618:	8f 70       	andi	r24, 0x0F	; 15
     61a:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN12OrangutanLCD8sendDataEh>
     61e:	8c 2f       	mov	r24, r28
     620:	8f 70       	andi	r24, 0x0F	; 15
     622:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN12OrangutanLCD8sendDataEh>
     626:	fa b8       	out	0x0a, r15	; 10
     628:	0b b9       	out	0x0b, r16	; 11
     62a:	14 b9       	out	0x04, r17	; 4
     62c:	d5 b9       	out	0x05, r29	; 5
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	e7 e0       	ldi	r30, 0x07	; 7
     634:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x16>

00000638 <_ZN12OrangutanLCD8send_cmdEh>:
     638:	42 e0       	ldi	r20, 0x02	; 2
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN12OrangutanLCD4sendEhhh>
     640:	08 95       	ret

00000642 <_ZN12OrangutanLCD9send_dataEh>:
     642:	42 e0       	ldi	r20, 0x02	; 2
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN12OrangutanLCD4sendEhhh>
     64a:	08 95       	ret

0000064c <_ZN12OrangutanLCD13send_4bit_cmdEh>:
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN12OrangutanLCD4sendEhhh>
     654:	08 95       	ret

00000656 <_ZN12OrangutanLCD5init2Ev>:
     656:	80 e1       	ldi	r24, 0x10	; 16
     658:	97 e2       	ldi	r25, 0x27	; 39
     65a:	a0 e0       	ldi	r26, 0x00	; 0
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     662:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
     666:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__data_end+0x2>
     66a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__data_end+0x3>
     66e:	52 9a       	sbi	0x0a, 2	; 10
     670:	20 9a       	sbi	0x04, 0	; 4
     672:	54 9a       	sbi	0x0a, 4	; 10
     674:	8e e1       	ldi	r24, 0x1E	; 30
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN12OrangutanLCD13send_4bit_cmdEh>
     682:	86 e0       	ldi	r24, 0x06	; 6
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN12OrangutanLCD13send_4bit_cmdEh>
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN12OrangutanLCD13send_4bit_cmdEh>
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN12OrangutanLCD13send_4bit_cmdEh>
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     6b4:	88 e2       	ldi	r24, 0x28	; 40
     6b6:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12OrangutanLCD8send_cmdEh>
     6ba:	88 e0       	ldi	r24, 0x08	; 8
     6bc:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12OrangutanLCD8send_cmdEh>
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12OrangutanLCD8send_cmdEh>
     6c6:	86 e0       	ldi	r24, 0x06	; 6
     6c8:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12OrangutanLCD8send_cmdEh>
     6cc:	8c e0       	ldi	r24, 0x0C	; 12
     6ce:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12OrangutanLCD8send_cmdEh>
     6d2:	08 95       	ret

000006d4 <_ZN12OrangutanLCD5clearEv>:
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12OrangutanLCD8send_cmdEh>
     6da:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <printf_chars>
     6de:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <printf_chars+0x1>
     6e2:	89 2b       	or	r24, r25
     6e4:	f9 f0       	breq	.+62     	; 0x724 <_ZN12OrangutanLCD5clearEv+0x50>
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	a0 e2       	ldi	r26, 0x20	; 32
     6ea:	26 2f       	mov	r18, r22
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	70 91 00 01 	lds	r23, 0x0100	; 0x800100 <__data_start>
     6f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <numLCDRows>
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	78 9f       	mul	r23, r24
     6fc:	a0 01       	movw	r20, r0
     6fe:	79 9f       	mul	r23, r25
     700:	50 0d       	add	r21, r0
     702:	11 24       	eor	r1, r1
     704:	24 17       	cp	r18, r20
     706:	35 07       	cpc	r19, r21
     708:	4c f4       	brge	.+18     	; 0x71c <_ZN12OrangutanLCD5clearEv+0x48>
     70a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <printf_chars>
     70e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <printf_chars+0x1>
     712:	e2 0f       	add	r30, r18
     714:	f3 1f       	adc	r31, r19
     716:	a0 83       	st	Z, r26
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	e7 cf       	rjmp	.-50     	; 0x6ea <_ZN12OrangutanLCD5clearEv+0x16>
     71c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <col>
     720:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <row>
     724:	08 95       	ret

00000726 <clear>:
     726:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN12OrangutanLCD5clearEv>
     72a:	08 95       	ret

0000072c <_ZN12OrangutanLCD5printEPKc>:
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	ec 01       	movw	r28, r24
     732:	89 91       	ld	r24, Y+
     734:	88 23       	and	r24, r24
     736:	19 f0       	breq	.+6      	; 0x73e <_ZN12OrangutanLCD5printEPKc+0x12>
     738:	0e 94 21 03 	call	0x642	; 0x642 <_ZN12OrangutanLCD9send_dataEh>
     73c:	fa cf       	rjmp	.-12     	; 0x732 <_ZN12OrangutanLCD5printEPKc+0x6>
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <print>:
     744:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN12OrangutanLCD5printEPKc>
     748:	08 95       	ret

0000074a <_ZN12OrangutanLCD6gotoXYEhh>:
     74a:	a5 e0       	ldi	r26, 0x05	; 5
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	eb ea       	ldi	r30, 0xAB	; 171
     750:	f3 e0       	ldi	r31, 0x03	; 3
     752:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__+0x1e>
     756:	18 2f       	mov	r17, r24
     758:	80 e8       	ldi	r24, 0x80	; 128
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	80 ec       	ldi	r24, 0xC0	; 192
     75e:	8a 83       	std	Y+2, r24	; 0x02
     760:	84 e9       	ldi	r24, 0x94	; 148
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	84 ed       	ldi	r24, 0xD4	; 212
     766:	8c 83       	std	Y+4, r24	; 0x04
     768:	fe 01       	movw	r30, r28
     76a:	e6 0f       	add	r30, r22
     76c:	f1 1d       	adc	r31, r1
     76e:	81 81       	ldd	r24, Z+1	; 0x01
     770:	81 0f       	add	r24, r17
     772:	6d 83       	std	Y+5, r22	; 0x05
     774:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN12OrangutanLCD8send_cmdEh>
     778:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <col>
     77c:	6d 81       	ldd	r22, Y+5	; 0x05
     77e:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <row>
     782:	25 96       	adiw	r28, 0x05	; 5
     784:	e3 e0       	ldi	r30, 0x03	; 3
     786:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__+0x1e>

0000078a <lcd_goto_xy>:
     78a:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN12OrangutanLCD6gotoXYEhh>
     78e:	08 95       	ret

00000790 <_ZN16OrangutanDigital9setOutputEhh>:
     790:	88 30       	cpi	r24, 0x08	; 8
     792:	58 f4       	brcc	.+22     	; 0x7aa <_ZN16OrangutanDigital9setOutputEhh+0x1a>
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	01 c0       	rjmp	.+2      	; 0x79a <_ZN16OrangutanDigital9setOutputEhh+0xa>
     798:	99 0f       	add	r25, r25
     79a:	8a 95       	dec	r24
     79c:	ea f7       	brpl	.-6      	; 0x798 <_ZN16OrangutanDigital9setOutputEhh+0x8>
     79e:	89 2f       	mov	r24, r25
     7a0:	aa e2       	ldi	r26, 0x2A	; 42
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	eb e2       	ldi	r30, 0x2B	; 43
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	21 c0       	rjmp	.+66     	; 0x7ec <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     7aa:	8e 30       	cpi	r24, 0x0E	; 14
     7ac:	60 f4       	brcc	.+24     	; 0x7c6 <_ZN16OrangutanDigital9setOutputEhh+0x36>
     7ae:	98 ef       	ldi	r25, 0xF8	; 248
     7b0:	98 0f       	add	r25, r24
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <_ZN16OrangutanDigital9setOutputEhh+0x28>
     7b6:	88 0f       	add	r24, r24
     7b8:	9a 95       	dec	r25
     7ba:	ea f7       	brpl	.-6      	; 0x7b6 <_ZN16OrangutanDigital9setOutputEhh+0x26>
     7bc:	a4 e2       	ldi	r26, 0x24	; 36
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	e5 e2       	ldi	r30, 0x25	; 37
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     7c6:	85 31       	cpi	r24, 0x15	; 21
     7c8:	60 f4       	brcc	.+24     	; 0x7e2 <_ZN16OrangutanDigital9setOutputEhh+0x52>
     7ca:	92 ef       	ldi	r25, 0xF2	; 242
     7cc:	98 0f       	add	r25, r24
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <_ZN16OrangutanDigital9setOutputEhh+0x44>
     7d2:	88 0f       	add	r24, r24
     7d4:	9a 95       	dec	r25
     7d6:	ea f7       	brpl	.-6      	; 0x7d2 <_ZN16OrangutanDigital9setOutputEhh+0x42>
     7d8:	a7 e2       	ldi	r26, 0x27	; 39
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	e8 e2       	ldi	r30, 0x28	; 40
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e0 e0       	ldi	r30, 0x00	; 0
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	6f 3f       	cpi	r22, 0xFF	; 255
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <_ZN16OrangutanDigital9setOutputEhh+0x66>
     7f0:	90 81       	ld	r25, Z
     7f2:	98 27       	eor	r25, r24
     7f4:	09 c0       	rjmp	.+18     	; 0x808 <_ZN16OrangutanDigital9setOutputEhh+0x78>
     7f6:	66 23       	and	r22, r22
     7f8:	19 f0       	breq	.+6      	; 0x800 <_ZN16OrangutanDigital9setOutputEhh+0x70>
     7fa:	90 81       	ld	r25, Z
     7fc:	98 2b       	or	r25, r24
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <_ZN16OrangutanDigital9setOutputEhh+0x78>
     800:	20 81       	ld	r18, Z
     802:	98 2f       	mov	r25, r24
     804:	90 95       	com	r25
     806:	92 23       	and	r25, r18
     808:	90 83       	st	Z, r25
     80a:	9c 91       	ld	r25, X
     80c:	98 2b       	or	r25, r24
     80e:	9c 93       	st	X, r25
     810:	08 95       	ret

00000812 <_ZN15OrangutanMotors5init2Ev>:
     812:	83 ef       	ldi	r24, 0xF3	; 243
     814:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     818:	84 bd       	out	0x24, r24	; 36
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     820:	85 bd       	out	0x25, r24	; 37
     822:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     826:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     82a:	18 bc       	out	0x28, r1	; 40
     82c:	17 bc       	out	0x27, r1	; 39
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	86 e0       	ldi	r24, 0x06	; 6
     832:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN16OrangutanDigital9setOutputEhh>
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	85 e0       	ldi	r24, 0x05	; 5
     83a:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN16OrangutanDigital9setOutputEhh>
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	8b e0       	ldi	r24, 0x0B	; 11
     842:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN16OrangutanDigital9setOutputEhh>
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN16OrangutanDigital9setOutputEhh>
     84e:	08 95       	ret

00000850 <_ZN15OrangutanMotors4initEv>:
     850:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZZN15OrangutanMotors4initEvE11initialized>
     854:	81 11       	cpse	r24, r1
     856:	05 c0       	rjmp	.+10     	; 0x862 <_ZN15OrangutanMotors4initEv+0x12>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZZN15OrangutanMotors4initEvE11initialized>
     85e:	0e 94 09 04 	call	0x812	; 0x812 <_ZN15OrangutanMotors5init2Ev>
     862:	08 95       	ret

00000864 <_ZN15OrangutanMotors10setM1SpeedEi>:
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
     86a:	0e 94 28 04 	call	0x850	; 0x850 <_ZN15OrangutanMotors4initEv>
     86e:	d7 ff       	sbrs	r29, 7
     870:	05 c0       	rjmp	.+10     	; 0x87c <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
     872:	d1 95       	neg	r29
     874:	c1 95       	neg	r28
     876:	d1 09       	sbc	r29, r1
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	01 c0       	rjmp	.+2      	; 0x87e <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	cf 3f       	cpi	r28, 0xFF	; 255
     880:	d1 05       	cpc	r29, r1
     882:	19 f0       	breq	.+6      	; 0x88a <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
     884:	14 f0       	brlt	.+4      	; 0x88a <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
     886:	cf ef       	ldi	r28, 0xFF	; 255
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	88 23       	and	r24, r24
     88c:	19 f0       	breq	.+6      	; 0x894 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
     88e:	18 bc       	out	0x28, r1	; 40
     890:	c7 bd       	out	0x27, r28	; 39
     892:	02 c0       	rjmp	.+4      	; 0x898 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
     894:	c8 bd       	out	0x28, r28	; 40
     896:	17 bc       	out	0x27, r1	; 39
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <_ZN15OrangutanMotors10setM2SpeedEi>:
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	ec 01       	movw	r28, r24
     8a4:	0e 94 28 04 	call	0x850	; 0x850 <_ZN15OrangutanMotors4initEv>
     8a8:	d7 ff       	sbrs	r29, 7
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
     8ac:	d1 95       	neg	r29
     8ae:	c1 95       	neg	r28
     8b0:	d1 09       	sbc	r29, r1
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	cf 3f       	cpi	r28, 0xFF	; 255
     8ba:	d1 05       	cpc	r29, r1
     8bc:	19 f0       	breq	.+6      	; 0x8c4 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
     8be:	14 f0       	brlt	.+4      	; 0x8c4 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
     8c0:	cf ef       	ldi	r28, 0xFF	; 255
     8c2:	d0 e0       	ldi	r29, 0x00	; 0
     8c4:	88 23       	and	r24, r24
     8c6:	29 f0       	breq	.+10     	; 0x8d2 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
     8c8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8cc:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     8d0:	04 c0       	rjmp	.+8      	; 0x8da <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
     8d2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8d6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <_ZN15OrangutanMotors9setSpeedsEii>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	eb 01       	movw	r28, r22
     8e6:	0e 94 32 04 	call	0x864	; 0x864 <_ZN15OrangutanMotors10setM1SpeedEi>
     8ea:	ce 01       	movw	r24, r28
     8ec:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN15OrangutanMotors10setM2SpeedEi>
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <set_motors>:
     8f6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <_ZN15OrangutanMotors9setSpeedsEii>
     8fa:	08 95       	ret

000008fc <_ZN20OrangutanPushbuttons5init2Ev>:
     8fc:	84 b1       	in	r24, 0x04	; 4
     8fe:	8d 7c       	andi	r24, 0xCD	; 205
     900:	84 b9       	out	0x04, r24	; 4
     902:	85 b1       	in	r24, 0x05	; 5
     904:	82 63       	ori	r24, 0x32	; 50
     906:	85 b9       	out	0x05, r24	; 5
     908:	85 e0       	ldi	r24, 0x05	; 5
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	6f 93       	push	r22
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	6a 95       	dec	r22
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0x11>
     914:	6f 91       	pop	r22
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	c9 f7       	brne	.-14     	; 0x90c <__stack+0xd>
     91a:	08 95       	ret

0000091c <_ZN20OrangutanPushbuttons4initEv>:
     91c:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
     920:	81 11       	cpse	r24, r1
     922:	05 c0       	rjmp	.+10     	; 0x92e <_ZN20OrangutanPushbuttons4initEv+0x12>
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
     92a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN20OrangutanPushbuttons5init2Ev>
     92e:	08 95       	ret

00000930 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
     930:	cf 93       	push	r28
     932:	c8 2f       	mov	r28, r24
     934:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN20OrangutanPushbuttons4initEv>
     938:	83 b1       	in	r24, 0x03	; 3
     93a:	8c 23       	and	r24, r28
     93c:	e9 f3       	breq	.-6      	; 0x938 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 09 05 	call	0xa12	; 0xa12 <delay_ms>
     946:	83 b1       	in	r24, 0x03	; 3
     948:	8c 23       	and	r24, r28
     94a:	b1 f3       	breq	.-20     	; 0x938 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     94c:	83 b1       	in	r24, 0x03	; 3
     94e:	8c 23       	and	r24, r28
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <wait_for_button_release>:
     954:	0e 94 98 04 	call	0x930	; 0x930 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
     958:	08 95       	ret

0000095a <_ZN20OrangutanPushbuttons9isPressedEh>:
     95a:	a1 e0       	ldi	r26, 0x01	; 1
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e3 eb       	ldi	r30, 0xB3	; 179
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__prologue_saves__+0x20>
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	0e 94 8e 04 	call	0x91c	; 0x91c <_ZN20OrangutanPushbuttons4initEv>
     96c:	93 b1       	in	r25, 0x03	; 3
     96e:	90 95       	com	r25
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	89 23       	and	r24, r25
     974:	21 96       	adiw	r28, 0x01	; 1
     976:	e2 e0       	ldi	r30, 0x02	; 2
     978:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__epilogue_restores__+0x20>

0000097c <button_is_pressed>:
     97c:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN20OrangutanPushbuttons9isPressedEh>
     980:	08 95       	ret

00000982 <__vector_9>:
     982:	2f 92       	push	r2
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	2f b6       	in	r2, 0x3f	; 63
     98a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <tickCount+0x1>
     98e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <tickCount+0x2>
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <tickCount+0x1>
     998:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <tickCount+0x2>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tickCount+0x3>
     9a2:	89 1f       	adc	r24, r25
     9a4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <tickCount+0x3>
     9a8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <us_over_10+0x1>
     9ac:	9c 5f       	subi	r25, 0xFC	; 252
     9ae:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <us_over_10+0x1>
     9b2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <us_over_10>
     9b6:	80 51       	subi	r24, 0x10	; 16
     9b8:	97 42       	sbci	r25, 0x27	; 39
     9ba:	c0 f0       	brcs	.+48     	; 0x9ec <end>
     9bc:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <us_over_10+0x1>
     9c0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <us_over_10>
     9c4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <msCounter>
     9c8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <msCounter+0x1>
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <msCounter>
     9d2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <msCounter+0x1>
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <msCounter+0x2>
     9dc:	89 1f       	adc	r24, r25
     9de:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <msCounter+0x2>
     9e2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <msCounter+0x3>
     9e6:	89 1f       	adc	r24, r25
     9e8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <msCounter+0x3>

000009ec <end>:
     9ec:	2f be       	out	0x3f, r2	; 63
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	2f 90       	pop	r2
     9f4:	18 95       	reti

000009f6 <_ZN13OrangutanTime17delayMillisecondsEj>:
     9f6:	28 ee       	ldi	r18, 0xE8	; 232
     9f8:	33 e0       	ldi	r19, 0x03	; 3
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	48 f0       	brcs	.+18     	; 0xa10 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
     9fe:	f9 01       	movw	r30, r18
     a00:	6f 93       	push	r22
     a02:	64 e0       	ldi	r22, 0x04	; 4
     a04:	6a 95       	dec	r22
     a06:	f1 f7       	brne	.-4      	; 0xa04 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
     a08:	6f 91       	pop	r22
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	c9 f7       	brne	.-14     	; 0xa00 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
     a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
     a10:	08 95       	ret

00000a12 <delay_ms>:
     a12:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <_ZN13OrangutanTime17delayMillisecondsEj>
     a16:	08 95       	ret

00000a18 <_ZN13OrangutanTime5init2Ev>:
     a18:	e0 e7       	ldi	r30, 0x70	; 112
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	8e 7f       	andi	r24, 0xFE	; 254
     a20:	80 83       	st	Z, r24
     a22:	a0 eb       	ldi	r26, 0xB0	; 176
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	8c 91       	ld	r24, X
     a28:	83 60       	ori	r24, 0x03	; 3
     a2a:	8c 93       	st	X, r24
     a2c:	a1 eb       	ldi	r26, 0xB1	; 177
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	8c 91       	ld	r24, X
     a32:	80 7f       	andi	r24, 0xF0	; 240
     a34:	8c 93       	st	X, r24
     a36:	8c 91       	ld	r24, X
     a38:	82 60       	ori	r24, 0x02	; 2
     a3a:	8c 93       	st	X, r24
     a3c:	b8 9a       	sbi	0x17, 0	; 23
     a3e:	80 81       	ld	r24, Z
     a40:	81 60       	ori	r24, 0x01	; 1
     a42:	80 83       	st	Z, r24
     a44:	78 94       	sei
     a46:	08 95       	ret

00000a48 <_ZN13OrangutanTime4initEv>:
     a48:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZZN13OrangutanTime4initEvE11initialized>
     a4c:	81 11       	cpse	r24, r1
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <_ZN13OrangutanTime4initEv+0x12>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <_ZZN13OrangutanTime4initEvE11initialized>
     a56:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN13OrangutanTime5init2Ev>
     a5a:	08 95       	ret

00000a5c <_ZN13OrangutanTime2msEv>:
     a5c:	0e 94 24 05 	call	0xa48	; 0xa48 <_ZN13OrangutanTime4initEv>
     a60:	e0 e7       	ldi	r30, 0x70	; 112
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	80 83       	st	Z, r24
     a6a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <msCounter>
     a6e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <msCounter+0x1>
     a72:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <msCounter+0x2>
     a76:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <msCounter+0x3>
     a7a:	20 81       	ld	r18, Z
     a7c:	21 60       	ori	r18, 0x01	; 1
     a7e:	20 83       	st	Z, r18
     a80:	08 95       	ret

00000a82 <get_ms>:
     a82:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN13OrangutanTime2msEv>
     a86:	08 95       	ret

00000a88 <_ZN13OrangutanTime5resetEv>:
     a88:	0e 94 24 05 	call	0xa48	; 0xa48 <_ZN13OrangutanTime4initEv>
     a8c:	e0 e7       	ldi	r30, 0x70	; 112
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8e 7f       	andi	r24, 0xFE	; 254
     a94:	80 83       	st	Z, r24
     a96:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <msCounter>
     a9a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <msCounter+0x1>
     a9e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <msCounter+0x2>
     aa2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <msCounter+0x3>
     aa6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <us_over_10+0x1>
     aaa:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <us_over_10>
     aae:	80 81       	ld	r24, Z
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	80 83       	st	Z, r24
     ab4:	08 95       	ret

00000ab6 <calibrate_line_sensors>:
     ab6:	68 2f       	mov	r22, r24
     ab8:	8e e2       	ldi	r24, 0x2E	; 46
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 43 09 	call	0x1286	; 0x1286 <_ZN16PololuQTRSensors9calibrateEh>
     ac0:	08 95       	ret

00000ac2 <read_line>:
     ac2:	46 2f       	mov	r20, r22
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	bc 01       	movw	r22, r24
     ac8:	8e e2       	ldi	r24, 0x2E	; 46
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 14 0a 	call	0x1428	; 0x1428 <_ZN16PololuQTRSensors8readLineEPjhh>
     ad0:	08 95       	ret

00000ad2 <_ZN9Pololu3pi4initEjh>:
     ad2:	0f 93       	push	r16
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	00 d0       	rcall	.+0      	; 0xada <_ZN9Pololu3pi4initEjh+0x8>
     ada:	00 d0       	rcall	.+0      	; 0xadc <_ZN9Pololu3pi4initEjh+0xa>
     adc:	1f 92       	push	r1
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	9c 01       	movw	r18, r24
     ae4:	85 e0       	ldi	r24, 0x05	; 5
     ae6:	e8 e0       	ldi	r30, 0x08	; 8
     ae8:	f1 e0       	ldi	r31, 0x01	; 1
     aea:	de 01       	movw	r26, r28
     aec:	11 96       	adiw	r26, 0x01	; 1
     aee:	01 90       	ld	r0, Z+
     af0:	0d 92       	st	X+, r0
     af2:	8a 95       	dec	r24
     af4:	e1 f7       	brne	.-8      	; 0xaee <_ZN9Pololu3pi4initEjh+0x1c>
     af6:	66 23       	and	r22, r22
     af8:	11 f0       	breq	.+4      	; 0xafe <_ZN9Pololu3pi4initEjh+0x2c>
     afa:	0f ef       	ldi	r16, 0xFF	; 255
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <_ZN9Pololu3pi4initEjh+0x2e>
     afe:	03 e1       	ldi	r16, 0x13	; 19
     b00:	45 e0       	ldi	r20, 0x05	; 5
     b02:	be 01       	movw	r22, r28
     b04:	6f 5f       	subi	r22, 0xFF	; 255
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	8e e2       	ldi	r24, 0x2E	; 46
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN18PololuQTRSensorsRC4initEPhhjh>
     b10:	8e e2       	ldi	r24, 0x2E	; 46
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN16PololuQTRSensors11emittersOffEv>
     b18:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13OrangutanTime5resetEv>
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <pololu_3pi_init>:
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN9Pololu3pi4initEjh>
     b34:	08 95       	ret

00000b36 <_GLOBAL__sub_D_pololu_3pi_init>:
     b36:	8e e2       	ldi	r24, 0x2E	; 46
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN16PololuQTRSensorsD1Ev>
     b3e:	08 95       	ret

00000b40 <delay_us>:
     b40:	6f 93       	push	r22
     b42:	64 e0       	ldi	r22, 0x04	; 4
     b44:	6a 95       	dec	r22
     b46:	f1 f7       	brne	.-4      	; 0xb44 <delay_us+0x4>
     b48:	6f 91       	pop	r22
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	c9 f7       	brne	.-14     	; 0xb40 <delay_us>
     b4e:	08 95       	ret

00000b50 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
     b50:	fc 01       	movw	r30, r24
     b52:	11 82       	std	Z+1, r1	; 0x01
     b54:	10 82       	st	Z, r1
     b56:	13 82       	std	Z+3, r1	; 0x03
     b58:	12 82       	std	Z+2, r1	; 0x02
     b5a:	15 82       	std	Z+5, r1	; 0x05
     b5c:	14 82       	std	Z+4, r1	; 0x04
     b5e:	16 82       	std	Z+6, r1	; 0x06
     b60:	68 30       	cpi	r22, 0x08	; 8
     b62:	68 f4       	brcc	.+26     	; 0xb7e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
     b64:	89 e2       	ldi	r24, 0x29	; 41
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
     b6c:	8b e2       	ldi	r24, 0x2B	; 43
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	93 83       	std	Z+3, r25	; 0x03
     b72:	82 83       	std	Z+2, r24	; 0x02
     b74:	8a e2       	ldi	r24, 0x2A	; 42
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	95 83       	std	Z+5, r25	; 0x05
     b7a:	84 83       	std	Z+4, r24	; 0x04
     b7c:	1f c0       	rjmp	.+62     	; 0xbbc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
     b7e:	6e 30       	cpi	r22, 0x0E	; 14
     b80:	70 f4       	brcc	.+28     	; 0xb9e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
     b82:	83 e2       	ldi	r24, 0x23	; 35
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	80 83       	st	Z, r24
     b8a:	85 e2       	ldi	r24, 0x25	; 37
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	93 83       	std	Z+3, r25	; 0x03
     b90:	82 83       	std	Z+2, r24	; 0x02
     b92:	84 e2       	ldi	r24, 0x24	; 36
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	95 83       	std	Z+5, r25	; 0x05
     b98:	84 83       	std	Z+4, r24	; 0x04
     b9a:	68 50       	subi	r22, 0x08	; 8
     b9c:	0f c0       	rjmp	.+30     	; 0xbbc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
     b9e:	65 31       	cpi	r22, 0x15	; 21
     ba0:	98 f4       	brcc	.+38     	; 0xbc8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
     ba2:	86 e2       	ldi	r24, 0x26	; 38
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	80 83       	st	Z, r24
     baa:	88 e2       	ldi	r24, 0x28	; 40
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	93 83       	std	Z+3, r25	; 0x03
     bb0:	82 83       	std	Z+2, r24	; 0x02
     bb2:	87 e2       	ldi	r24, 0x27	; 39
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	95 83       	std	Z+5, r25	; 0x05
     bb8:	84 83       	std	Z+4, r24	; 0x04
     bba:	6e 50       	subi	r22, 0x0E	; 14
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
     bc0:	88 0f       	add	r24, r24
     bc2:	6a 95       	dec	r22
     bc4:	ea f7       	brpl	.-6      	; 0xbc0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
     bc6:	86 83       	std	Z+6, r24	; 0x06
     bc8:	08 95       	ret

00000bca <_ZN16PololuQTRSensors4initEhhh>:
     bca:	a7 e0       	ldi	r26, 0x07	; 7
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	eb ee       	ldi	r30, 0xEB	; 235
     bd0:	f5 e0       	ldi	r31, 0x05	; 5
     bd2:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__prologue_saves__+0x1c>
     bd6:	8c 01       	movw	r16, r24
     bd8:	fc 01       	movw	r30, r24
     bda:	11 82       	std	Z+1, r1	; 0x01
     bdc:	10 82       	st	Z, r1
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	12 82       	std	Z+2, r1	; 0x02
     be2:	15 82       	std	Z+5, r1	; 0x05
     be4:	14 82       	std	Z+4, r1	; 0x04
     be6:	17 82       	std	Z+7, r1	; 0x07
     be8:	16 82       	std	Z+6, r1	; 0x06
     bea:	61 31       	cpi	r22, 0x11	; 17
     bec:	18 f0       	brcs	.+6      	; 0xbf4 <_ZN16PololuQTRSensors4initEhhh+0x2a>
     bee:	80 e1       	ldi	r24, 0x10	; 16
     bf0:	80 87       	std	Z+8, r24	; 0x08
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <_ZN16PololuQTRSensors4initEhhh+0x2e>
     bf4:	fc 01       	movw	r30, r24
     bf6:	60 87       	std	Z+8, r22	; 0x08
     bf8:	f8 01       	movw	r30, r16
     bfa:	20 8b       	std	Z+16, r18	; 0x10
     bfc:	64 2f       	mov	r22, r20
     bfe:	ce 01       	movw	r24, r28
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
     c06:	8f 81       	ldd	r24, Y+7	; 0x07
     c08:	f8 01       	movw	r30, r16
     c0a:	81 87       	std	Z+9, r24	; 0x09
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	93 87       	std	Z+11, r25	; 0x0b
     c12:	82 87       	std	Z+10, r24	; 0x0a
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	9e 81       	ldd	r25, Y+6	; 0x06
     c18:	95 87       	std	Z+13, r25	; 0x0d
     c1a:	84 87       	std	Z+12, r24	; 0x0c
     c1c:	27 96       	adiw	r28, 0x07	; 7
     c1e:	e4 e0       	ldi	r30, 0x04	; 4
     c20:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__epilogue_restores__+0x1c>

00000c24 <_ZN16PololuQTRSensors11emittersOffEv>:
     c24:	fc 01       	movw	r30, r24
     c26:	a4 85       	ldd	r26, Z+12	; 0x0c
     c28:	b5 85       	ldd	r27, Z+13	; 0x0d
     c2a:	10 97       	sbiw	r26, 0x00	; 0
     c2c:	79 f0       	breq	.+30     	; 0xc4c <_ZN16PololuQTRSensors11emittersOffEv+0x28>
     c2e:	8c 91       	ld	r24, X
     c30:	91 85       	ldd	r25, Z+9	; 0x09
     c32:	89 2b       	or	r24, r25
     c34:	8c 93       	st	X, r24
     c36:	a2 85       	ldd	r26, Z+10	; 0x0a
     c38:	b3 85       	ldd	r27, Z+11	; 0x0b
     c3a:	9c 91       	ld	r25, X
     c3c:	81 85       	ldd	r24, Z+9	; 0x09
     c3e:	80 95       	com	r24
     c40:	89 23       	and	r24, r25
     c42:	8c 93       	st	X, r24
     c44:	88 ec       	ldi	r24, 0xC8	; 200
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 a0 05 	call	0xb40	; 0xb40 <delay_us>
     c4c:	08 95       	ret

00000c4e <_ZN16PololuQTRSensors10emittersOnEv>:
     c4e:	fc 01       	movw	r30, r24
     c50:	a4 85       	ldd	r26, Z+12	; 0x0c
     c52:	b5 85       	ldd	r27, Z+13	; 0x0d
     c54:	10 97       	sbiw	r26, 0x00	; 0
     c56:	71 f0       	breq	.+28     	; 0xc74 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
     c58:	8c 91       	ld	r24, X
     c5a:	91 85       	ldd	r25, Z+9	; 0x09
     c5c:	89 2b       	or	r24, r25
     c5e:	8c 93       	st	X, r24
     c60:	a2 85       	ldd	r26, Z+10	; 0x0a
     c62:	b3 85       	ldd	r27, Z+11	; 0x0b
     c64:	8c 91       	ld	r24, X
     c66:	91 85       	ldd	r25, Z+9	; 0x09
     c68:	89 2b       	or	r24, r25
     c6a:	8c 93       	st	X, r24
     c6c:	88 ec       	ldi	r24, 0xC8	; 200
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 a0 05 	call	0xb40	; 0xb40 <delay_us>
     c74:	08 95       	ret

00000c76 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
     c76:	a7 e0       	ldi	r26, 0x07	; 7
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e1 e4       	ldi	r30, 0x41	; 65
     c7c:	f6 e0       	ldi	r31, 0x06	; 6
     c7e:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__prologue_saves__+0x6>
     c82:	7c 01       	movw	r14, r24
     c84:	4b 01       	movw	r8, r22
     c86:	64 2f       	mov	r22, r20
     c88:	39 01       	movw	r6, r18
     c8a:	40 2f       	mov	r20, r16
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN16PololuQTRSensors4initEhhh>
     c92:	87 01       	movw	r16, r14
     c94:	0f 5b       	subi	r16, 0xBF	; 191
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	f8 01       	movw	r30, r16
     c9a:	10 82       	st	Z, r1
     c9c:	67 01       	movw	r12, r14
     c9e:	f2 e4       	ldi	r31, 0x42	; 66
     ca0:	cf 0e       	add	r12, r31
     ca2:	d1 1c       	adc	r13, r1
     ca4:	f6 01       	movw	r30, r12
     ca6:	10 82       	st	Z, r1
     ca8:	57 01       	movw	r10, r14
     caa:	f3 e4       	ldi	r31, 0x43	; 67
     cac:	af 0e       	add	r10, r31
     cae:	b1 1c       	adc	r11, r1
     cb0:	f5 01       	movw	r30, r10
     cb2:	10 82       	st	Z, r1
     cb4:	f7 01       	movw	r30, r14
     cb6:	77 86       	std	Z+15, r7	; 0x0f
     cb8:	66 86       	std	Z+14, r6	; 0x0e
     cba:	51 2c       	mov	r5, r1
     cbc:	f7 01       	movw	r30, r14
     cbe:	80 85       	ldd	r24, Z+8	; 0x08
     cc0:	58 16       	cp	r5, r24
     cc2:	50 f5       	brcc	.+84     	; 0xd18 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
     cc4:	65 2c       	mov	r6, r5
     cc6:	71 2c       	mov	r7, r1
     cc8:	f4 01       	movw	r30, r8
     cca:	e6 0d       	add	r30, r6
     ccc:	f7 1d       	adc	r31, r7
     cce:	60 81       	ld	r22, Z
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
     cd8:	2f 81       	ldd	r18, Y+7	; 0x07
     cda:	f7 01       	movw	r30, r14
     cdc:	e6 0d       	add	r30, r6
     cde:	f7 1d       	adc	r31, r7
     ce0:	21 8b       	std	Z+17, r18	; 0x11
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	f3 01       	movw	r30, r6
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 0d       	add	r30, r14
     cee:	ff 1d       	adc	r31, r15
     cf0:	92 a3       	std	Z+34, r25	; 0x22
     cf2:	81 a3       	std	Z+33, r24	; 0x21
     cf4:	83 32       	cpi	r24, 0x23	; 35
     cf6:	91 05       	cpc	r25, r1
     cf8:	11 f4       	brne	.+4      	; 0xcfe <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
     cfa:	f8 01       	movw	r30, r16
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
     cfe:	86 32       	cpi	r24, 0x26	; 38
     d00:	91 05       	cpc	r25, r1
     d02:	11 f4       	brne	.+4      	; 0xd08 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
     d04:	f6 01       	movw	r30, r12
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
     d08:	89 97       	sbiw	r24, 0x29	; 41
     d0a:	21 f4       	brne	.+8      	; 0xd14 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
     d0c:	f5 01       	movw	r30, r10
     d0e:	80 81       	ld	r24, Z
     d10:	82 2b       	or	r24, r18
     d12:	80 83       	st	Z, r24
     d14:	53 94       	inc	r5
     d16:	d2 cf       	rjmp	.-92     	; 0xcbc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
     d18:	27 96       	adiw	r28, 0x07	; 7
     d1a:	ef e0       	ldi	r30, 0x0F	; 15
     d1c:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__epilogue_restores__+0x6>

00000d20 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e6 e9       	ldi	r30, 0x96	; 150
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__prologue_saves__+0xa>
     d2c:	ec 01       	movw	r28, r24
     d2e:	5b 01       	movw	r10, r22
     d30:	6c 01       	movw	r12, r24
     d32:	81 e4       	ldi	r24, 0x41	; 65
     d34:	c8 0e       	add	r12, r24
     d36:	d1 1c       	adc	r13, r1
     d38:	f6 01       	movw	r30, r12
     d3a:	80 80       	ld	r8, Z
     d3c:	7e 01       	movw	r14, r28
     d3e:	f2 e4       	ldi	r31, 0x42	; 66
     d40:	ef 0e       	add	r14, r31
     d42:	f1 1c       	adc	r15, r1
     d44:	f7 01       	movw	r30, r14
     d46:	70 80       	ld	r7, Z
     d48:	8e 01       	movw	r16, r28
     d4a:	0d 5b       	subi	r16, 0xBD	; 189
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	f8 01       	movw	r30, r16
     d50:	90 80       	ld	r9, Z
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	98 85       	ldd	r25, Y+8	; 0x08
     d56:	89 17       	cp	r24, r25
     d58:	48 f4       	brcc	.+18     	; 0xd6c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
     d5a:	f5 01       	movw	r30, r10
     d5c:	e8 0f       	add	r30, r24
     d5e:	f1 1d       	adc	r31, r1
     d60:	e8 0f       	add	r30, r24
     d62:	f1 1d       	adc	r31, r1
     d64:	11 82       	std	Z+1, r1	; 0x01
     d66:	10 82       	st	Z, r1
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	f4 cf       	rjmp	.-24     	; 0xd54 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
     d6c:	84 b1       	in	r24, 0x04	; 4
     d6e:	f6 01       	movw	r30, r12
     d70:	90 81       	ld	r25, Z
     d72:	89 2b       	or	r24, r25
     d74:	84 b9       	out	0x04, r24	; 4
     d76:	87 b1       	in	r24, 0x07	; 7
     d78:	f7 01       	movw	r30, r14
     d7a:	90 81       	ld	r25, Z
     d7c:	89 2b       	or	r24, r25
     d7e:	87 b9       	out	0x07, r24	; 7
     d80:	8a b1       	in	r24, 0x0a	; 10
     d82:	f8 01       	movw	r30, r16
     d84:	90 81       	ld	r25, Z
     d86:	89 2b       	or	r24, r25
     d88:	8a b9       	out	0x0a, r24	; 10
     d8a:	85 b1       	in	r24, 0x05	; 5
     d8c:	f6 01       	movw	r30, r12
     d8e:	90 81       	ld	r25, Z
     d90:	89 2b       	or	r24, r25
     d92:	85 b9       	out	0x05, r24	; 5
     d94:	88 b1       	in	r24, 0x08	; 8
     d96:	f7 01       	movw	r30, r14
     d98:	90 81       	ld	r25, Z
     d9a:	89 2b       	or	r24, r25
     d9c:	88 b9       	out	0x08, r24	; 8
     d9e:	8b b1       	in	r24, 0x0b	; 11
     da0:	f8 01       	movw	r30, r16
     da2:	90 81       	ld	r25, Z
     da4:	89 2b       	or	r24, r25
     da6:	8b b9       	out	0x0b, r24	; 11
     da8:	8a e0       	ldi	r24, 0x0A	; 10
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 a0 05 	call	0xb40	; 0xb40 <delay_us>
     db0:	94 b1       	in	r25, 0x04	; 4
     db2:	f6 01       	movw	r30, r12
     db4:	80 81       	ld	r24, Z
     db6:	80 95       	com	r24
     db8:	89 23       	and	r24, r25
     dba:	84 b9       	out	0x04, r24	; 4
     dbc:	97 b1       	in	r25, 0x07	; 7
     dbe:	f7 01       	movw	r30, r14
     dc0:	80 81       	ld	r24, Z
     dc2:	80 95       	com	r24
     dc4:	89 23       	and	r24, r25
     dc6:	87 b9       	out	0x07, r24	; 7
     dc8:	9a b1       	in	r25, 0x0a	; 10
     dca:	f8 01       	movw	r30, r16
     dcc:	80 81       	ld	r24, Z
     dce:	80 95       	com	r24
     dd0:	89 23       	and	r24, r25
     dd2:	8a b9       	out	0x0a, r24	; 10
     dd4:	95 b1       	in	r25, 0x05	; 5
     dd6:	f6 01       	movw	r30, r12
     dd8:	80 81       	ld	r24, Z
     dda:	80 95       	com	r24
     ddc:	89 23       	and	r24, r25
     dde:	85 b9       	out	0x05, r24	; 5
     de0:	98 b1       	in	r25, 0x08	; 8
     de2:	f7 01       	movw	r30, r14
     de4:	80 81       	ld	r24, Z
     de6:	80 95       	com	r24
     de8:	89 23       	and	r24, r25
     dea:	88 b9       	out	0x08, r24	; 8
     dec:	9b b1       	in	r25, 0x0b	; 11
     dee:	f8 01       	movw	r30, r16
     df0:	80 81       	ld	r24, Z
     df2:	80 95       	com	r24
     df4:	89 23       	and	r24, r25
     df6:	8b b9       	out	0x0b, r24	; 11
     df8:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     dfc:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     e00:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     e04:	83 60       	ori	r24, 0x03	; 3
     e06:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     e10:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	2e 85       	ldd	r18, Y+14	; 0x0e
     e1a:	3f 85       	ldd	r19, Y+15	; 0x0f
     e1c:	82 17       	cp	r24, r18
     e1e:	93 07       	cpc	r25, r19
     e20:	20 f5       	brcc	.+72     	; 0xe6a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
     e22:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     e26:	2c 2d       	mov	r18, r12
     e28:	24 1b       	sub	r18, r20
     e2a:	82 0f       	add	r24, r18
     e2c:	91 1d       	adc	r25, r1
     e2e:	03 b1       	in	r16, 0x03	; 3
     e30:	08 11       	cpse	r16, r8
     e32:	32 c0       	rjmp	.+100    	; 0xe98 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
     e34:	f6 b0       	in	r15, 0x06	; 6
     e36:	f7 10       	cpse	r15, r7
     e38:	2f c0       	rjmp	.+94     	; 0xe98 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
     e3a:	29 b1       	in	r18, 0x09	; 9
     e3c:	29 11       	cpse	r18, r9
     e3e:	2c c0       	rjmp	.+88     	; 0xe98 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
     e40:	10 c0       	rjmp	.+32     	; 0xe62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
     e42:	21 2f       	mov	r18, r17
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	a9 01       	movw	r20, r18
     e48:	44 0f       	add	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	f5 01       	movw	r30, r10
     e4e:	e4 0f       	add	r30, r20
     e50:	f5 1f       	adc	r31, r21
     e52:	60 81       	ld	r22, Z
     e54:	71 81       	ldd	r23, Z+1	; 0x01
     e56:	67 2b       	or	r22, r23
     e58:	21 f1       	breq	.+72     	; 0xea2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
     e5a:	1f 5f       	subi	r17, 0xFF	; 255
     e5c:	28 85       	ldd	r18, Y+8	; 0x08
     e5e:	12 17       	cp	r17, r18
     e60:	80 f3       	brcs	.-32     	; 0xe42 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
     e62:	7f 2c       	mov	r7, r15
     e64:	80 2e       	mov	r8, r16
     e66:	4c 2d       	mov	r20, r12
     e68:	d7 cf       	rjmp	.-82     	; 0xe18 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
     e6a:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     e6e:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	88 85       	ldd	r24, Y+8	; 0x08
     e76:	28 17       	cp	r18, r24
     e78:	30 f5       	brcc	.+76     	; 0xec6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
     e7a:	f5 01       	movw	r30, r10
     e7c:	e2 0f       	add	r30, r18
     e7e:	f1 1d       	adc	r31, r1
     e80:	e2 0f       	add	r30, r18
     e82:	f1 1d       	adc	r31, r1
     e84:	80 81       	ld	r24, Z
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	89 2b       	or	r24, r25
     e8a:	21 f4       	brne	.+8      	; 0xe94 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
     e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	ee cf       	rjmp	.-36     	; 0xe74 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
     e98:	03 b1       	in	r16, 0x03	; 3
     e9a:	f6 b0       	in	r15, 0x06	; 6
     e9c:	99 b0       	in	r9, 0x09	; 9
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	dd cf       	rjmp	.-70     	; 0xe5c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
     ea2:	de 01       	movw	r26, r28
     ea4:	a4 0f       	add	r26, r20
     ea6:	b5 1f       	adc	r27, r21
     ea8:	91 96       	adiw	r26, 0x21	; 33
     eaa:	0d 90       	ld	r0, X+
     eac:	bc 91       	ld	r27, X
     eae:	a0 2d       	mov	r26, r0
     eb0:	4c 91       	ld	r20, X
     eb2:	de 01       	movw	r26, r28
     eb4:	a2 0f       	add	r26, r18
     eb6:	b3 1f       	adc	r27, r19
     eb8:	51 96       	adiw	r26, 0x11	; 17
     eba:	2c 91       	ld	r18, X
     ebc:	42 23       	and	r20, r18
     ebe:	69 f6       	brne	.-102    	; 0xe5a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
     ec4:	ca cf       	rjmp	.-108    	; 0xe5a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	ed e0       	ldi	r30, 0x0D	; 13
     ecc:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__epilogue_restores__+0xa>

00000ed0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	fc 01       	movw	r30, r24
     ede:	9b 01       	movw	r18, r22
     ee0:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     ee4:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     ee8:	47 b1       	in	r20, 0x07	; 7
     eea:	18 b1       	in	r17, 0x08	; 8
     eec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     ef0:	86 fd       	sbrc	r24, 6
     ef2:	fc cf       	rjmp	.-8      	; 0xeec <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 85       	ldd	r25, Z+8	; 0x08
     ef8:	89 17       	cp	r24, r25
     efa:	48 f4       	brcc	.+18     	; 0xf0e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
     efc:	d9 01       	movw	r26, r18
     efe:	a8 0f       	add	r26, r24
     f00:	b1 1d       	adc	r27, r1
     f02:	a8 0f       	add	r26, r24
     f04:	b1 1d       	adc	r27, r1
     f06:	1d 92       	st	X+, r1
     f08:	1c 92       	st	X, r1
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	f4 cf       	rjmp	.-24     	; 0xef6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
     f0e:	97 b1       	in	r25, 0x07	; 7
     f10:	82 a1       	ldd	r24, Z+34	; 0x22
     f12:	80 95       	com	r24
     f14:	89 23       	and	r24, r25
     f16:	87 b9       	out	0x07, r24	; 7
     f18:	98 b1       	in	r25, 0x08	; 8
     f1a:	82 a1       	ldd	r24, Z+34	; 0x22
     f1c:	80 95       	com	r24
     f1e:	89 23       	and	r24, r25
     f20:	88 b9       	out	0x08, r24	; 8
     f22:	87 e8       	ldi	r24, 0x87	; 135
     f24:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     f28:	e1 2c       	mov	r14, r1
     f2a:	81 a1       	ldd	r24, Z+33	; 0x21
     f2c:	e8 16       	cp	r14, r24
     f2e:	10 f0       	brcs	.+4      	; 0xf34 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
     f30:	e1 2c       	mov	r14, r1
     f32:	29 c0       	rjmp	.+82     	; 0xf86 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	80 85       	ldd	r24, Z+8	; 0x08
     f38:	58 17       	cp	r21, r24
     f3a:	18 f5       	brcc	.+70     	; 0xf82 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
     f3c:	a5 2f       	mov	r26, r21
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ef 01       	movw	r28, r30
     f42:	ca 0f       	add	r28, r26
     f44:	db 1f       	adc	r29, r27
     f46:	89 89       	ldd	r24, Y+17	; 0x11
     f48:	80 64       	ori	r24, 0x40	; 64
     f4a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     f4e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     f52:	80 64       	ori	r24, 0x40	; 64
     f54:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     f58:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     f5c:	86 fd       	sbrc	r24, 6
     f5e:	fc cf       	rjmp	.-8      	; 0xf58 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
     f60:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     f64:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     f68:	aa 0f       	add	r26, r26
     f6a:	bb 1f       	adc	r27, r27
     f6c:	a2 0f       	add	r26, r18
     f6e:	b3 1f       	adc	r27, r19
     f70:	8d 91       	ld	r24, X+
     f72:	9c 91       	ld	r25, X
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	86 0f       	add	r24, r22
     f78:	97 1f       	adc	r25, r23
     f7a:	8d 93       	st	X+, r24
     f7c:	9c 93       	st	X, r25
     f7e:	5f 5f       	subi	r21, 0xFF	; 255
     f80:	da cf       	rjmp	.-76     	; 0xf36 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
     f82:	e3 94       	inc	r14
     f84:	d2 cf       	rjmp	.-92     	; 0xf2a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
     f86:	80 85       	ldd	r24, Z+8	; 0x08
     f88:	e8 16       	cp	r14, r24
     f8a:	a0 f4       	brcc	.+40     	; 0xfb4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
     f8c:	e9 01       	movw	r28, r18
     f8e:	ce 0d       	add	r28, r14
     f90:	d1 1d       	adc	r29, r1
     f92:	ce 0d       	add	r28, r14
     f94:	d1 1d       	adc	r29, r1
     f96:	61 a1       	ldd	r22, Z+33	; 0x21
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	cb 01       	movw	r24, r22
     f9c:	95 95       	asr	r25
     f9e:	87 95       	ror	r24
     fa0:	a8 81       	ld	r26, Y
     fa2:	b9 81       	ldd	r27, Y+1	; 0x01
     fa4:	8a 0f       	add	r24, r26
     fa6:	9b 1f       	adc	r25, r27
     fa8:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     fac:	79 83       	std	Y+1, r23	; 0x01
     fae:	68 83       	st	Y, r22
     fb0:	e3 94       	inc	r14
     fb2:	e9 cf       	rjmp	.-46     	; 0xf86 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
     fb4:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     fb8:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     fbc:	18 b9       	out	0x08, r17	; 8
     fbe:	47 b9       	out	0x07, r20	; 7
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	e6 e0       	ldi	r30, 0x06	; 6
     fc6:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__epilogue_restores__+0x18>

00000fca <_ZN16PololuQTRSensors4readEPjh>:
     fca:	a0 e2       	ldi	r26, 0x20	; 32
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb ee       	ldi	r30, 0xEB	; 235
     fd0:	f7 e0       	ldi	r31, 0x07	; 7
     fd2:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x16>
     fd6:	8c 01       	movw	r16, r24
     fd8:	7b 01       	movw	r14, r22
     fda:	d4 2e       	mov	r13, r20
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	84 0f       	add	r24, r20
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	18 f4       	brcc	.+6      	; 0xfea <_ZN16PololuQTRSensors4readEPjh+0x20>
     fe4:	c8 01       	movw	r24, r16
     fe6:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN16PololuQTRSensors10emittersOnEv>
     fea:	d8 01       	movw	r26, r16
     fec:	50 96       	adiw	r26, 0x10	; 16
     fee:	8c 91       	ld	r24, X
     ff0:	b7 01       	movw	r22, r14
     ff2:	81 11       	cpse	r24, r1
     ff4:	10 c0       	rjmp	.+32     	; 0x1016 <_ZN16PololuQTRSensors4readEPjh+0x4c>
     ff6:	c8 01       	movw	r24, r16
     ff8:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
     ffc:	c8 01       	movw	r24, r16
     ffe:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN16PololuQTRSensors11emittersOffEv>
    1002:	b2 e0       	ldi	r27, 0x02	; 2
    1004:	db 12       	cpse	r13, r27
    1006:	3a c0       	rjmp	.+116    	; 0x107c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1008:	be 01       	movw	r22, r28
    100a:	6f 5f       	subi	r22, 0xFF	; 255
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	c8 01       	movw	r24, r16
    1010:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1016:	c8 01       	movw	r24, r16
    1018:	0e 94 68 07 	call	0xed0	; 0xed0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    101c:	c8 01       	movw	r24, r16
    101e:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN16PololuQTRSensors11emittersOffEv>
    1022:	e2 e0       	ldi	r30, 0x02	; 2
    1024:	de 12       	cpse	r13, r30
    1026:	2a c0       	rjmp	.+84     	; 0x107c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1028:	be 01       	movw	r22, r28
    102a:	6f 5f       	subi	r22, 0xFF	; 255
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	c8 01       	movw	r24, r16
    1030:	0e 94 68 07 	call	0xed0	; 0xed0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	f8 01       	movw	r30, r16
    1038:	80 85       	ldd	r24, Z+8	; 0x08
    103a:	48 17       	cp	r20, r24
    103c:	f8 f4       	brcc	.+62     	; 0x107c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    103e:	84 2f       	mov	r24, r20
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	f7 01       	movw	r30, r14
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	21 e0       	ldi	r18, 0x01	; 1
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	2c 0f       	add	r18, r28
    1052:	3d 1f       	adc	r19, r29
    1054:	82 0f       	add	r24, r18
    1056:	93 1f       	adc	r25, r19
    1058:	d8 01       	movw	r26, r16
    105a:	1e 96       	adiw	r26, 0x0e	; 14
    105c:	2d 91       	ld	r18, X+
    105e:	3c 91       	ld	r19, X
    1060:	1f 97       	sbiw	r26, 0x0f	; 15
    1062:	dc 01       	movw	r26, r24
    1064:	8d 91       	ld	r24, X+
    1066:	9c 91       	ld	r25, X
    1068:	28 1b       	sub	r18, r24
    106a:	39 0b       	sbc	r19, r25
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	82 0f       	add	r24, r18
    1072:	93 1f       	adc	r25, r19
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	80 83       	st	Z, r24
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	dd cf       	rjmp	.-70     	; 0x1036 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    107c:	a0 96       	adiw	r28, 0x20	; 32
    107e:	e7 e0       	ldi	r30, 0x07	; 7
    1080:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x16>

00001084 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1084:	2f 92       	push	r2
    1086:	3f 92       	push	r3
    1088:	5f 92       	push	r5
    108a:	6f 92       	push	r6
    108c:	7f 92       	push	r7
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	c0 56       	subi	r28, 0x60	; 96
    10ac:	d1 09       	sbc	r29, r1
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	8c 01       	movw	r16, r24
    10ba:	4b 01       	movw	r8, r22
    10bc:	5a 01       	movw	r10, r20
    10be:	52 2e       	mov	r5, r18
    10c0:	da 01       	movw	r26, r20
    10c2:	8d 91       	ld	r24, X+
    10c4:	9c 91       	ld	r25, X
    10c6:	89 2b       	or	r24, r25
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    10ca:	f4 01       	movw	r30, r8
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	89 2b       	or	r24, r25
    10d2:	f1 f4       	brne	.+60     	; 0x1110 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    10d4:	24 c0       	rjmp	.+72     	; 0x111e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    10d6:	d8 01       	movw	r26, r16
    10d8:	18 96       	adiw	r26, 0x08	; 8
    10da:	8c 91       	ld	r24, X
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0e 94 6f 0b 	call	0x16de	; 0x16de <malloc>
    10e6:	f5 01       	movw	r30, r10
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	80 83       	st	Z, r24
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    10f0:	b1 c0       	rjmp	.+354    	; 0x1254 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    10f2:	fc 01       	movw	r30, r24
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	d8 01       	movw	r26, r16
    10fa:	18 96       	adiw	r26, 0x08	; 8
    10fc:	8c 91       	ld	r24, X
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	28 17       	cp	r18, r24
    1102:	39 07       	cpc	r19, r25
    1104:	14 f7       	brge	.-60     	; 0x10ca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1106:	11 92       	st	Z+, r1
    1108:	11 92       	st	Z+, r1
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	f4 cf       	rjmp	.-24     	; 0x10f8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1110:	e1 2c       	mov	r14, r1
    1112:	f1 2c       	mov	r15, r1
    1114:	6e 01       	movw	r12, r28
    1116:	b1 e2       	ldi	r27, 0x21	; 33
    1118:	cb 0e       	add	r12, r27
    111a:	d1 1c       	adc	r13, r1
    111c:	21 c0       	rjmp	.+66     	; 0x1160 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    111e:	f8 01       	movw	r30, r16
    1120:	80 85       	ldd	r24, Z+8	; 0x08
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0e 94 6f 0b 	call	0x16de	; 0x16de <malloc>
    112c:	d4 01       	movw	r26, r8
    112e:	8d 93       	st	X+, r24
    1130:	9c 93       	st	X, r25
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	09 f4       	brne	.+2      	; 0x1138 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1136:	8e c0       	rjmp	.+284    	; 0x1254 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1138:	fc 01       	movw	r30, r24
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	d8 01       	movw	r26, r16
    1140:	18 96       	adiw	r26, 0x08	; 8
    1142:	8c 91       	ld	r24, X
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	28 17       	cp	r18, r24
    1148:	39 07       	cpc	r19, r25
    114a:	14 f7       	brge	.-60     	; 0x1110 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    114c:	d8 01       	movw	r26, r16
    114e:	1e 96       	adiw	r26, 0x0e	; 14
    1150:	8d 91       	ld	r24, X+
    1152:	9c 91       	ld	r25, X
    1154:	1f 97       	sbiw	r26, 0x0f	; 15
    1156:	81 93       	st	Z+, r24
    1158:	91 93       	st	Z+, r25
    115a:	2f 5f       	subi	r18, 0xFF	; 255
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	ef cf       	rjmp	.-34     	; 0x113e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1160:	45 2d       	mov	r20, r5
    1162:	be 01       	movw	r22, r28
    1164:	6f 5b       	subi	r22, 0xBF	; 191
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	c8 01       	movw	r24, r16
    116a:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN16PololuQTRSensors4readEPjh>
    116e:	f8 01       	movw	r30, r16
    1170:	60 84       	ldd	r6, Z+8	; 0x08
    1172:	71 2c       	mov	r7, r1
    1174:	fe 01       	movw	r30, r28
    1176:	ef 5b       	subi	r30, 0xBF	; 191
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	c6 01       	movw	r24, r12
    117c:	9e 01       	movw	r18, r28
    117e:	2f 5f       	subi	r18, 0xFF	; 255
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	19 01       	movw	r2, r18
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	26 15       	cp	r18, r6
    118a:	37 05       	cpc	r19, r7
    118c:	4c f5       	brge	.+82     	; 0x11e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    118e:	e1 14       	cp	r14, r1
    1190:	f1 04       	cpc	r15, r1
    1192:	89 f0       	breq	.+34     	; 0x11b6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1194:	dc 01       	movw	r26, r24
    1196:	6d 91       	ld	r22, X+
    1198:	7c 91       	ld	r23, X
    119a:	40 81       	ld	r20, Z
    119c:	51 81       	ldd	r21, Z+1	; 0x01
    119e:	64 17       	cp	r22, r20
    11a0:	75 07       	cpc	r23, r21
    11a2:	48 f0       	brcs	.+18     	; 0x11b6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    11a4:	d1 01       	movw	r26, r2
    11a6:	6d 91       	ld	r22, X+
    11a8:	7c 91       	ld	r23, X
    11aa:	40 81       	ld	r20, Z
    11ac:	51 81       	ldd	r21, Z+1	; 0x01
    11ae:	46 17       	cp	r20, r22
    11b0:	57 07       	cpc	r21, r23
    11b2:	48 f0       	brcs	.+18     	; 0x11c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    11b4:	0d c0       	rjmp	.+26     	; 0x11d0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    11b6:	40 81       	ld	r20, Z
    11b8:	51 81       	ldd	r21, Z+1	; 0x01
    11ba:	dc 01       	movw	r26, r24
    11bc:	4d 93       	st	X+, r20
    11be:	5c 93       	st	X, r21
    11c0:	e1 14       	cp	r14, r1
    11c2:	f1 04       	cpc	r15, r1
    11c4:	79 f7       	brne	.-34     	; 0x11a4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    11c6:	40 81       	ld	r20, Z
    11c8:	51 81       	ldd	r21, Z+1	; 0x01
    11ca:	d1 01       	movw	r26, r2
    11cc:	4d 93       	st	X+, r20
    11ce:	5c 93       	st	X, r21
    11d0:	2f 5f       	subi	r18, 0xFF	; 255
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	b2 e0       	ldi	r27, 0x02	; 2
    11d6:	2b 0e       	add	r2, r27
    11d8:	31 1c       	adc	r3, r1
    11da:	32 96       	adiw	r30, 0x02	; 2
    11dc:	02 96       	adiw	r24, 0x02	; 2
    11de:	d4 cf       	rjmp	.-88     	; 0x1188 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    11e0:	ef ef       	ldi	r30, 0xFF	; 255
    11e2:	ee 1a       	sub	r14, r30
    11e4:	fe 0a       	sbc	r15, r30
    11e6:	fa e0       	ldi	r31, 0x0A	; 10
    11e8:	ef 16       	cp	r14, r31
    11ea:	f1 04       	cpc	r15, r1
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    11ee:	b8 cf       	rjmp	.-144    	; 0x1160 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    11f0:	9e 01       	movw	r18, r28
    11f2:	2f 5f       	subi	r18, 0xFF	; 255
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	79 01       	movw	r14, r18
    11f8:	36 01       	movw	r6, r12
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	f8 01       	movw	r30, r16
    1200:	20 85       	ldd	r18, Z+8	; 0x08
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	82 17       	cp	r24, r18
    1206:	93 07       	cpc	r25, r19
    1208:	2c f5       	brge	.+74     	; 0x1254 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    120a:	d7 01       	movw	r26, r14
    120c:	2d 91       	ld	r18, X+
    120e:	3d 91       	ld	r19, X+
    1210:	7d 01       	movw	r14, r26
    1212:	b3 01       	movw	r22, r6
    1214:	6c 19       	sub	r22, r12
    1216:	7d 09       	sbc	r23, r13
    1218:	d5 01       	movw	r26, r10
    121a:	ed 91       	ld	r30, X+
    121c:	fc 91       	ld	r31, X
    121e:	e6 0f       	add	r30, r22
    1220:	f7 1f       	adc	r31, r23
    1222:	40 81       	ld	r20, Z
    1224:	51 81       	ldd	r21, Z+1	; 0x01
    1226:	42 17       	cp	r20, r18
    1228:	53 07       	cpc	r21, r19
    122a:	10 f4       	brcc	.+4      	; 0x1230 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    122c:	31 83       	std	Z+1, r19	; 0x01
    122e:	20 83       	st	Z, r18
    1230:	f3 01       	movw	r30, r6
    1232:	21 91       	ld	r18, Z+
    1234:	31 91       	ld	r19, Z+
    1236:	3f 01       	movw	r6, r30
    1238:	d4 01       	movw	r26, r8
    123a:	ed 91       	ld	r30, X+
    123c:	fc 91       	ld	r31, X
    123e:	e6 0f       	add	r30, r22
    1240:	f7 1f       	adc	r31, r23
    1242:	40 81       	ld	r20, Z
    1244:	51 81       	ldd	r21, Z+1	; 0x01
    1246:	24 17       	cp	r18, r20
    1248:	35 07       	cpc	r19, r21
    124a:	10 f4       	brcc	.+4      	; 0x1250 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    124c:	31 83       	std	Z+1, r19	; 0x01
    124e:	20 83       	st	Z, r18
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	d5 cf       	rjmp	.-86     	; 0x11fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1254:	c0 5a       	subi	r28, 0xA0	; 160
    1256:	df 4f       	sbci	r29, 0xFF	; 255
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	7f 90       	pop	r7
    127c:	6f 90       	pop	r6
    127e:	5f 90       	pop	r5
    1280:	3f 90       	pop	r3
    1282:	2f 90       	pop	r2
    1284:	08 95       	ret

00001286 <_ZN16PololuQTRSensors9calibrateEh>:
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24
    128e:	16 2f       	mov	r17, r22
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	86 0f       	add	r24, r22
    1294:	82 30       	cpi	r24, 0x02	; 2
    1296:	18 f0       	brcs	.+6      	; 0x129e <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1298:	66 23       	and	r22, r22
    129a:	59 f0       	breq	.+22     	; 0x12b2 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    129c:	14 c0       	rjmp	.+40     	; 0x12c6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	ae 01       	movw	r20, r28
    12a2:	4e 5f       	subi	r20, 0xFE	; 254
    12a4:	5f 4f       	sbci	r21, 0xFF	; 255
    12a6:	be 01       	movw	r22, r28
    12a8:	ce 01       	movw	r24, r28
    12aa:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    12ae:	12 30       	cpi	r17, 0x02	; 2
    12b0:	51 f4       	brne	.+20     	; 0x12c6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    12b2:	ae 01       	movw	r20, r28
    12b4:	4a 5f       	subi	r20, 0xFA	; 250
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	be 01       	movw	r22, r28
    12ba:	6c 5f       	subi	r22, 0xFC	; 252
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	ce 01       	movw	r24, r28
    12c2:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	08 95       	ret

000012ce <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ed e6       	ldi	r30, 0x6D	; 109
    12d4:	f9 e0       	ldi	r31, 0x09	; 9
    12d6:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__+0x12>
    12da:	ec 01       	movw	r28, r24
    12dc:	8b 01       	movw	r16, r22
    12de:	b4 2e       	mov	r11, r20
    12e0:	84 2f       	mov	r24, r20
    12e2:	8d 7f       	andi	r24, 0xFD	; 253
    12e4:	51 f4       	brne	.+20     	; 0x12fa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	89 2b       	or	r24, r25
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    12ee:	97 c0       	rjmp	.+302    	; 0x141e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    12f0:	8e 81       	ldd	r24, Y+6	; 0x06
    12f2:	9f 81       	ldd	r25, Y+7	; 0x07
    12f4:	89 2b       	or	r24, r25
    12f6:	09 f4       	brne	.+2      	; 0x12fa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    12f8:	92 c0       	rjmp	.+292    	; 0x141e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	8b 0d       	add	r24, r11
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	50 f4       	brcc	.+20     	; 0x1316 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1302:	88 81       	ld	r24, Y
    1304:	99 81       	ldd	r25, Y+1	; 0x01
    1306:	89 2b       	or	r24, r25
    1308:	09 f4       	brne	.+2      	; 0x130c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    130a:	89 c0       	rjmp	.+274    	; 0x141e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	89 2b       	or	r24, r25
    1312:	09 f4       	brne	.+2      	; 0x1316 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1314:	84 c0       	rjmp	.+264    	; 0x141e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1316:	4b 2d       	mov	r20, r11
    1318:	b8 01       	movw	r22, r16
    131a:	ce 01       	movw	r24, r28
    131c:	0e 94 e5 07 	call	0xfca	; 0xfca <_ZN16PololuQTRSensors4readEPjh>
    1320:	78 01       	movw	r14, r16
    1322:	00 e0       	ldi	r16, 0x00	; 0
    1324:	10 e0       	ldi	r17, 0x00	; 0
    1326:	c1 2c       	mov	r12, r1
    1328:	d1 2c       	mov	r13, r1
    132a:	88 85       	ldd	r24, Y+8	; 0x08
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	c8 16       	cp	r12, r24
    1330:	d9 06       	cpc	r13, r25
    1332:	0c f0       	brlt	.+2      	; 0x1336 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    1334:	74 c0       	rjmp	.+232    	; 0x141e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	b8 12       	cpse	r11, r24
    133a:	0a c0       	rjmp	.+20     	; 0x1350 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    133c:	ea 81       	ldd	r30, Y+2	; 0x02
    133e:	fb 81       	ldd	r31, Y+3	; 0x03
    1340:	e0 0f       	add	r30, r16
    1342:	f1 1f       	adc	r31, r17
    1344:	01 90       	ld	r0, Z+
    1346:	f0 81       	ld	r31, Z
    1348:	e0 2d       	mov	r30, r0
    134a:	a8 81       	ld	r26, Y
    134c:	b9 81       	ldd	r27, Y+1	; 0x01
    134e:	0d c0       	rjmp	.+26     	; 0x136a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	2e 81       	ldd	r18, Y+6	; 0x06
    1356:	3f 81       	ldd	r19, Y+7	; 0x07
    1358:	b1 10       	cpse	r11, r1
    135a:	0c c0       	rjmp	.+24     	; 0x1374 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    135c:	f9 01       	movw	r30, r18
    135e:	e0 0f       	add	r30, r16
    1360:	f1 1f       	adc	r31, r17
    1362:	01 90       	ld	r0, Z+
    1364:	f0 81       	ld	r31, Z
    1366:	e0 2d       	mov	r30, r0
    1368:	dc 01       	movw	r26, r24
    136a:	a0 0f       	add	r26, r16
    136c:	b1 1f       	adc	r27, r17
    136e:	8d 91       	ld	r24, X+
    1370:	9c 91       	ld	r25, X
    1372:	28 c0       	rjmp	.+80     	; 0x13c4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1374:	fc 01       	movw	r30, r24
    1376:	e0 0f       	add	r30, r16
    1378:	f1 1f       	adc	r31, r17
    137a:	40 81       	ld	r20, Z
    137c:	51 81       	ldd	r21, Z+1	; 0x01
    137e:	e8 81       	ld	r30, Y
    1380:	f9 81       	ldd	r31, Y+1	; 0x01
    1382:	e0 0f       	add	r30, r16
    1384:	f1 1f       	adc	r31, r17
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	ee 85       	ldd	r30, Y+14	; 0x0e
    138c:	ff 85       	ldd	r31, Y+15	; 0x0f
    138e:	48 17       	cp	r20, r24
    1390:	59 07       	cpc	r21, r25
    1392:	10 f4       	brcc	.+4      	; 0x1398 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    1394:	cf 01       	movw	r24, r30
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    1398:	8e 0f       	add	r24, r30
    139a:	9f 1f       	adc	r25, r31
    139c:	84 1b       	sub	r24, r20
    139e:	95 0b       	sbc	r25, r21
    13a0:	d9 01       	movw	r26, r18
    13a2:	a0 0f       	add	r26, r16
    13a4:	b1 1f       	adc	r27, r17
    13a6:	2d 91       	ld	r18, X+
    13a8:	3c 91       	ld	r19, X
    13aa:	aa 81       	ldd	r26, Y+2	; 0x02
    13ac:	bb 81       	ldd	r27, Y+3	; 0x03
    13ae:	a0 0f       	add	r26, r16
    13b0:	b1 1f       	adc	r27, r17
    13b2:	4d 91       	ld	r20, X+
    13b4:	5c 91       	ld	r21, X
    13b6:	24 17       	cp	r18, r20
    13b8:	35 07       	cpc	r19, r21
    13ba:	20 f0       	brcs	.+8      	; 0x13c4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    13bc:	e4 0f       	add	r30, r20
    13be:	f5 1f       	adc	r31, r21
    13c0:	e2 1b       	sub	r30, r18
    13c2:	f3 0b       	sbc	r31, r19
    13c4:	e8 1b       	sub	r30, r24
    13c6:	f9 0b       	sbc	r31, r25
    13c8:	a9 f0       	breq	.+42     	; 0x13f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    13ca:	d7 01       	movw	r26, r14
    13cc:	2d 91       	ld	r18, X+
    13ce:	3c 91       	ld	r19, X
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	28 1b       	sub	r18, r24
    13d6:	39 0b       	sbc	r19, r25
    13d8:	41 09       	sbc	r20, r1
    13da:	51 09       	sbc	r21, r1
    13dc:	a8 ee       	ldi	r26, 0xE8	; 232
    13de:	b3 e0       	ldi	r27, 0x03	; 3
    13e0:	0e 94 10 0b 	call	0x1620	; 0x1620 <__muluhisi3>
    13e4:	9f 01       	movw	r18, r30
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__divmodsi4>
    13ee:	37 fd       	sbrc	r19, 7
    13f0:	0a c0       	rjmp	.+20     	; 0x1406 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	29 3e       	cpi	r18, 0xE9	; 233
    13fa:	b3 e0       	ldi	r27, 0x03	; 3
    13fc:	3b 07       	cpc	r19, r27
    13fe:	2c f0       	brlt	.+10     	; 0x140a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1400:	28 ee       	ldi	r18, 0xE8	; 232
    1402:	33 e0       	ldi	r19, 0x03	; 3
    1404:	02 c0       	rjmp	.+4      	; 0x140a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	f7 01       	movw	r30, r14
    140c:	21 93       	st	Z+, r18
    140e:	31 93       	st	Z+, r19
    1410:	7f 01       	movw	r14, r30
    1412:	ff ef       	ldi	r31, 0xFF	; 255
    1414:	cf 1a       	sub	r12, r31
    1416:	df 0a       	sbc	r13, r31
    1418:	0e 5f       	subi	r16, 0xFE	; 254
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	86 cf       	rjmp	.-244    	; 0x132a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	e9 e0       	ldi	r30, 0x09	; 9
    1424:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__+0x12>

00001428 <_ZN16PololuQTRSensors8readLineEPjhh>:
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ea e1       	ldi	r30, 0x1A	; 26
    142e:	fa e0       	ldi	r31, 0x0A	; 10
    1430:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__prologue_saves__>
    1434:	ec 01       	movw	r28, r24
    1436:	8b 01       	movw	r16, r22
    1438:	82 2e       	mov	r8, r18
    143a:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN16PololuQTRSensors14readCalibratedEPjh>
    143e:	28 84       	ldd	r2, Y+8	; 0x08
    1440:	e8 01       	movw	r28, r16
    1442:	41 2c       	mov	r4, r1
    1444:	51 2c       	mov	r5, r1
    1446:	32 01       	movw	r6, r4
    1448:	00 e0       	ldi	r16, 0x00	; 0
    144a:	10 e0       	ldi	r17, 0x00	; 0
    144c:	c1 2c       	mov	r12, r1
    144e:	d1 2c       	mov	r13, r1
    1450:	76 01       	movw	r14, r12
    1452:	31 2c       	mov	r3, r1
    1454:	91 2c       	mov	r9, r1
    1456:	58 ee       	ldi	r21, 0xE8	; 232
    1458:	a5 2e       	mov	r10, r21
    145a:	53 e0       	ldi	r21, 0x03	; 3
    145c:	b5 2e       	mov	r11, r21
    145e:	92 14       	cp	r9, r2
    1460:	21 f1       	breq	.+72     	; 0x14aa <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    1462:	e9 91       	ld	r30, Y+
    1464:	f9 91       	ld	r31, Y+
    1466:	88 20       	and	r8, r8
    1468:	21 f0       	breq	.+8      	; 0x1472 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    146a:	c5 01       	movw	r24, r10
    146c:	8e 1b       	sub	r24, r30
    146e:	9f 0b       	sbc	r25, r31
    1470:	fc 01       	movw	r30, r24
    1472:	e9 3c       	cpi	r30, 0xC9	; 201
    1474:	f1 05       	cpc	r31, r1
    1476:	24 f4       	brge	.+8      	; 0x1480 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    1478:	e3 33       	cpi	r30, 0x33	; 51
    147a:	f1 05       	cpc	r31, r1
    147c:	74 f0       	brlt	.+28     	; 0x149a <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    1480:	33 24       	eor	r3, r3
    1482:	33 94       	inc	r3
    1484:	df 01       	movw	r26, r30
    1486:	a3 01       	movw	r20, r6
    1488:	92 01       	movw	r18, r4
    148a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__mulshisi3>
    148e:	c6 0e       	add	r12, r22
    1490:	d7 1e       	adc	r13, r23
    1492:	e8 1e       	adc	r14, r24
    1494:	f9 1e       	adc	r15, r25
    1496:	0e 0f       	add	r16, r30
    1498:	1f 1f       	adc	r17, r31
    149a:	93 94       	inc	r9
    149c:	98 ee       	ldi	r25, 0xE8	; 232
    149e:	49 0e       	add	r4, r25
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	59 1e       	adc	r5, r25
    14a4:	61 1c       	adc	r6, r1
    14a6:	71 1c       	adc	r7, r1
    14a8:	da cf       	rjmp	.-76     	; 0x145e <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    14aa:	31 10       	cpse	r3, r1
    14ac:	1e c0       	rjmp	.+60     	; 0x14ea <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    14ae:	49 2d       	mov	r20, r9
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	41 50       	subi	r20, 0x01	; 1
    14b4:	51 09       	sbc	r21, r1
    14b6:	24 ef       	ldi	r18, 0xF4	; 244
    14b8:	31 e0       	ldi	r19, 0x01	; 1
    14ba:	42 9f       	mul	r20, r18
    14bc:	c0 01       	movw	r24, r0
    14be:	43 9f       	mul	r20, r19
    14c0:	90 0d       	add	r25, r0
    14c2:	52 9f       	mul	r21, r18
    14c4:	90 0d       	add	r25, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    14cc:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    14d0:	28 17       	cp	r18, r24
    14d2:	39 07       	cpc	r19, r25
    14d4:	b4 f0       	brlt	.+44     	; 0x1502 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    14d6:	88 ee       	ldi	r24, 0xE8	; 232
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	48 9f       	mul	r20, r24
    14dc:	90 01       	movw	r18, r0
    14de:	49 9f       	mul	r20, r25
    14e0:	30 0d       	add	r19, r0
    14e2:	58 9f       	mul	r21, r24
    14e4:	30 0d       	add	r19, r0
    14e6:	11 24       	eor	r1, r1
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    14ea:	98 01       	movw	r18, r16
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	c7 01       	movw	r24, r14
    14f2:	b6 01       	movw	r22, r12
    14f4:	0e 94 cf 0a 	call	0x159e	; 0x159e <__udivmodsi4>
    14f8:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    14fc:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	c9 01       	movw	r24, r18
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	e2 e1       	ldi	r30, 0x12	; 18
    150e:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__epilogue_restores__>

00001512 <_ZN16PololuQTRSensorsD1Ev>:
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	11 f0       	breq	.+4      	; 0x1524 <_ZN16PololuQTRSensorsD1Ev+0x12>
    1520:	0e 94 07 0c 	call	0x180e	; 0x180e <free>
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	9f 81       	ldd	r25, Y+7	; 0x07
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	11 f0       	breq	.+4      	; 0x1530 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    152c:	0e 94 07 0c 	call	0x180e	; 0x180e <free>
    1530:	88 81       	ld	r24, Y
    1532:	99 81       	ldd	r25, Y+1	; 0x01
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	11 f0       	breq	.+4      	; 0x153c <_ZN16PololuQTRSensorsD1Ev+0x2a>
    1538:	0e 94 07 0c 	call	0x180e	; 0x180e <free>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	11 f0       	breq	.+4      	; 0x1548 <_ZN16PololuQTRSensorsD1Ev+0x36>
    1544:	0e 94 07 0c 	call	0x180e	; 0x180e <free>
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <__udivmodhi4>:
    154e:	aa 1b       	sub	r26, r26
    1550:	bb 1b       	sub	r27, r27
    1552:	51 e1       	ldi	r21, 0x11	; 17
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <__udivmodhi4_ep>

00001556 <__udivmodhi4_loop>:
    1556:	aa 1f       	adc	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	a6 17       	cp	r26, r22
    155c:	b7 07       	cpc	r27, r23
    155e:	10 f0       	brcs	.+4      	; 0x1564 <__udivmodhi4_ep>
    1560:	a6 1b       	sub	r26, r22
    1562:	b7 0b       	sbc	r27, r23

00001564 <__udivmodhi4_ep>:
    1564:	88 1f       	adc	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	5a 95       	dec	r21
    156a:	a9 f7       	brne	.-22     	; 0x1556 <__udivmodhi4_loop>
    156c:	80 95       	com	r24
    156e:	90 95       	com	r25
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	08 95       	ret

00001576 <__divmodhi4>:
    1576:	97 fb       	bst	r25, 7
    1578:	07 2e       	mov	r0, r23
    157a:	16 f4       	brtc	.+4      	; 0x1580 <__divmodhi4+0xa>
    157c:	00 94       	com	r0
    157e:	07 d0       	rcall	.+14     	; 0x158e <__divmodhi4_neg1>
    1580:	77 fd       	sbrc	r23, 7
    1582:	09 d0       	rcall	.+18     	; 0x1596 <__divmodhi4_neg2>
    1584:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
    1588:	07 fc       	sbrc	r0, 7
    158a:	05 d0       	rcall	.+10     	; 0x1596 <__divmodhi4_neg2>
    158c:	3e f4       	brtc	.+14     	; 0x159c <__divmodhi4_exit>

0000158e <__divmodhi4_neg1>:
    158e:	90 95       	com	r25
    1590:	81 95       	neg	r24
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	08 95       	ret

00001596 <__divmodhi4_neg2>:
    1596:	70 95       	com	r23
    1598:	61 95       	neg	r22
    159a:	7f 4f       	sbci	r23, 0xFF	; 255

0000159c <__divmodhi4_exit>:
    159c:	08 95       	ret

0000159e <__udivmodsi4>:
    159e:	a1 e2       	ldi	r26, 0x21	; 33
    15a0:	1a 2e       	mov	r1, r26
    15a2:	aa 1b       	sub	r26, r26
    15a4:	bb 1b       	sub	r27, r27
    15a6:	fd 01       	movw	r30, r26
    15a8:	0d c0       	rjmp	.+26     	; 0x15c4 <__udivmodsi4_ep>

000015aa <__udivmodsi4_loop>:
    15aa:	aa 1f       	adc	r26, r26
    15ac:	bb 1f       	adc	r27, r27
    15ae:	ee 1f       	adc	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	a2 17       	cp	r26, r18
    15b4:	b3 07       	cpc	r27, r19
    15b6:	e4 07       	cpc	r30, r20
    15b8:	f5 07       	cpc	r31, r21
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <__udivmodsi4_ep>
    15bc:	a2 1b       	sub	r26, r18
    15be:	b3 0b       	sbc	r27, r19
    15c0:	e4 0b       	sbc	r30, r20
    15c2:	f5 0b       	sbc	r31, r21

000015c4 <__udivmodsi4_ep>:
    15c4:	66 1f       	adc	r22, r22
    15c6:	77 1f       	adc	r23, r23
    15c8:	88 1f       	adc	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	1a 94       	dec	r1
    15ce:	69 f7       	brne	.-38     	; 0x15aa <__udivmodsi4_loop>
    15d0:	60 95       	com	r22
    15d2:	70 95       	com	r23
    15d4:	80 95       	com	r24
    15d6:	90 95       	com	r25
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	bd 01       	movw	r22, r26
    15de:	cf 01       	movw	r24, r30
    15e0:	08 95       	ret

000015e2 <__divmodsi4>:
    15e2:	05 2e       	mov	r0, r21
    15e4:	97 fb       	bst	r25, 7
    15e6:	1e f4       	brtc	.+6      	; 0x15ee <__divmodsi4+0xc>
    15e8:	00 94       	com	r0
    15ea:	0e 94 08 0b 	call	0x1610	; 0x1610 <__negsi2>
    15ee:	57 fd       	sbrc	r21, 7
    15f0:	07 d0       	rcall	.+14     	; 0x1600 <__divmodsi4_neg2>
    15f2:	0e 94 cf 0a 	call	0x159e	; 0x159e <__udivmodsi4>
    15f6:	07 fc       	sbrc	r0, 7
    15f8:	03 d0       	rcall	.+6      	; 0x1600 <__divmodsi4_neg2>
    15fa:	4e f4       	brtc	.+18     	; 0x160e <__divmodsi4_exit>
    15fc:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__negsi2>

00001600 <__divmodsi4_neg2>:
    1600:	50 95       	com	r21
    1602:	40 95       	com	r20
    1604:	30 95       	com	r19
    1606:	21 95       	neg	r18
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	4f 4f       	sbci	r20, 0xFF	; 255
    160c:	5f 4f       	sbci	r21, 0xFF	; 255

0000160e <__divmodsi4_exit>:
    160e:	08 95       	ret

00001610 <__negsi2>:
    1610:	90 95       	com	r25
    1612:	80 95       	com	r24
    1614:	70 95       	com	r23
    1616:	61 95       	neg	r22
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8f 4f       	sbci	r24, 0xFF	; 255
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	08 95       	ret

00001620 <__muluhisi3>:
    1620:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__umulhisi3>
    1624:	a5 9f       	mul	r26, r21
    1626:	90 0d       	add	r25, r0
    1628:	b4 9f       	mul	r27, r20
    162a:	90 0d       	add	r25, r0
    162c:	a4 9f       	mul	r26, r20
    162e:	80 0d       	add	r24, r0
    1630:	91 1d       	adc	r25, r1
    1632:	11 24       	eor	r1, r1
    1634:	08 95       	ret

00001636 <__mulshisi3>:
    1636:	b7 ff       	sbrs	r27, 7
    1638:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__muluhisi3>

0000163c <__mulohisi3>:
    163c:	0e 94 10 0b 	call	0x1620	; 0x1620 <__muluhisi3>
    1640:	82 1b       	sub	r24, r18
    1642:	93 0b       	sbc	r25, r19
    1644:	08 95       	ret

00001646 <__prologue_saves__>:
    1646:	2f 92       	push	r2
    1648:	3f 92       	push	r3
    164a:	4f 92       	push	r4
    164c:	5f 92       	push	r5
    164e:	6f 92       	push	r6
    1650:	7f 92       	push	r7
    1652:	8f 92       	push	r8
    1654:	9f 92       	push	r9
    1656:	af 92       	push	r10
    1658:	bf 92       	push	r11
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	ca 1b       	sub	r28, r26
    1670:	db 0b       	sbc	r29, r27
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	09 94       	ijmp

0000167e <__epilogue_restores__>:
    167e:	2a 88       	ldd	r2, Y+18	; 0x12
    1680:	39 88       	ldd	r3, Y+17	; 0x11
    1682:	48 88       	ldd	r4, Y+16	; 0x10
    1684:	5f 84       	ldd	r5, Y+15	; 0x0f
    1686:	6e 84       	ldd	r6, Y+14	; 0x0e
    1688:	7d 84       	ldd	r7, Y+13	; 0x0d
    168a:	8c 84       	ldd	r8, Y+12	; 0x0c
    168c:	9b 84       	ldd	r9, Y+11	; 0x0b
    168e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1690:	b9 84       	ldd	r11, Y+9	; 0x09
    1692:	c8 84       	ldd	r12, Y+8	; 0x08
    1694:	df 80       	ldd	r13, Y+7	; 0x07
    1696:	ee 80       	ldd	r14, Y+6	; 0x06
    1698:	fd 80       	ldd	r15, Y+5	; 0x05
    169a:	0c 81       	ldd	r16, Y+4	; 0x04
    169c:	1b 81       	ldd	r17, Y+3	; 0x03
    169e:	aa 81       	ldd	r26, Y+2	; 0x02
    16a0:	b9 81       	ldd	r27, Y+1	; 0x01
    16a2:	ce 0f       	add	r28, r30
    16a4:	d1 1d       	adc	r29, r1
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	ed 01       	movw	r28, r26
    16b2:	08 95       	ret

000016b4 <__tablejump2__>:
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	05 90       	lpm	r0, Z+
    16ba:	f4 91       	lpm	r31, Z
    16bc:	e0 2d       	mov	r30, r0
    16be:	09 94       	ijmp

000016c0 <__umulhisi3>:
    16c0:	a2 9f       	mul	r26, r18
    16c2:	b0 01       	movw	r22, r0
    16c4:	b3 9f       	mul	r27, r19
    16c6:	c0 01       	movw	r24, r0
    16c8:	a3 9f       	mul	r26, r19
    16ca:	70 0d       	add	r23, r0
    16cc:	81 1d       	adc	r24, r1
    16ce:	11 24       	eor	r1, r1
    16d0:	91 1d       	adc	r25, r1
    16d2:	b2 9f       	mul	r27, r18
    16d4:	70 0d       	add	r23, r0
    16d6:	81 1d       	adc	r24, r1
    16d8:	11 24       	eor	r1, r1
    16da:	91 1d       	adc	r25, r1
    16dc:	08 95       	ret

000016de <malloc>:
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	91 05       	cpc	r25, r1
    16ea:	10 f4       	brcc	.+4      	; 0x16f0 <malloc+0x12>
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <__flp>
    16f4:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <__flp+0x1>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	30 97       	sbiw	r30, 0x00	; 0
    1702:	19 f1       	breq	.+70     	; 0x174a <malloc+0x6c>
    1704:	40 81       	ld	r20, Z
    1706:	51 81       	ldd	r21, Z+1	; 0x01
    1708:	02 81       	ldd	r16, Z+2	; 0x02
    170a:	13 81       	ldd	r17, Z+3	; 0x03
    170c:	48 17       	cp	r20, r24
    170e:	59 07       	cpc	r21, r25
    1710:	c8 f0       	brcs	.+50     	; 0x1744 <malloc+0x66>
    1712:	84 17       	cp	r24, r20
    1714:	95 07       	cpc	r25, r21
    1716:	69 f4       	brne	.+26     	; 0x1732 <malloc+0x54>
    1718:	10 97       	sbiw	r26, 0x00	; 0
    171a:	31 f0       	breq	.+12     	; 0x1728 <malloc+0x4a>
    171c:	12 96       	adiw	r26, 0x02	; 2
    171e:	0c 93       	st	X, r16
    1720:	12 97       	sbiw	r26, 0x02	; 2
    1722:	13 96       	adiw	r26, 0x03	; 3
    1724:	1c 93       	st	X, r17
    1726:	27 c0       	rjmp	.+78     	; 0x1776 <malloc+0x98>
    1728:	00 93 45 02 	sts	0x0245, r16	; 0x800245 <__flp>
    172c:	10 93 46 02 	sts	0x0246, r17	; 0x800246 <__flp+0x1>
    1730:	22 c0       	rjmp	.+68     	; 0x1776 <malloc+0x98>
    1732:	21 15       	cp	r18, r1
    1734:	31 05       	cpc	r19, r1
    1736:	19 f0       	breq	.+6      	; 0x173e <malloc+0x60>
    1738:	42 17       	cp	r20, r18
    173a:	53 07       	cpc	r21, r19
    173c:	18 f4       	brcc	.+6      	; 0x1744 <malloc+0x66>
    173e:	9a 01       	movw	r18, r20
    1740:	bd 01       	movw	r22, r26
    1742:	ef 01       	movw	r28, r30
    1744:	df 01       	movw	r26, r30
    1746:	f8 01       	movw	r30, r16
    1748:	db cf       	rjmp	.-74     	; 0x1700 <malloc+0x22>
    174a:	21 15       	cp	r18, r1
    174c:	31 05       	cpc	r19, r1
    174e:	f9 f0       	breq	.+62     	; 0x178e <malloc+0xb0>
    1750:	28 1b       	sub	r18, r24
    1752:	39 0b       	sbc	r19, r25
    1754:	24 30       	cpi	r18, 0x04	; 4
    1756:	31 05       	cpc	r19, r1
    1758:	80 f4       	brcc	.+32     	; 0x177a <malloc+0x9c>
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	61 15       	cp	r22, r1
    1760:	71 05       	cpc	r23, r1
    1762:	21 f0       	breq	.+8      	; 0x176c <malloc+0x8e>
    1764:	fb 01       	movw	r30, r22
    1766:	93 83       	std	Z+3, r25	; 0x03
    1768:	82 83       	std	Z+2, r24	; 0x02
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <malloc+0x96>
    176c:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <__flp+0x1>
    1770:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <__flp>
    1774:	fe 01       	movw	r30, r28
    1776:	32 96       	adiw	r30, 0x02	; 2
    1778:	44 c0       	rjmp	.+136    	; 0x1802 <malloc+0x124>
    177a:	fe 01       	movw	r30, r28
    177c:	e2 0f       	add	r30, r18
    177e:	f3 1f       	adc	r31, r19
    1780:	81 93       	st	Z+, r24
    1782:	91 93       	st	Z+, r25
    1784:	22 50       	subi	r18, 0x02	; 2
    1786:	31 09       	sbc	r19, r1
    1788:	39 83       	std	Y+1, r19	; 0x01
    178a:	28 83       	st	Y, r18
    178c:	3a c0       	rjmp	.+116    	; 0x1802 <malloc+0x124>
    178e:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <__brkval>
    1792:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <__brkval+0x1>
    1796:	23 2b       	or	r18, r19
    1798:	41 f4       	brne	.+16     	; 0x17aa <malloc+0xcc>
    179a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
    179e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
    17a2:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <__brkval+0x1>
    17a6:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <__brkval>
    17aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
    17ae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    17b2:	21 15       	cp	r18, r1
    17b4:	31 05       	cpc	r19, r1
    17b6:	41 f4       	brne	.+16     	; 0x17c8 <malloc+0xea>
    17b8:	2d b7       	in	r18, 0x3d	; 61
    17ba:	3e b7       	in	r19, 0x3e	; 62
    17bc:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    17c0:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    17c4:	24 1b       	sub	r18, r20
    17c6:	35 0b       	sbc	r19, r21
    17c8:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <__brkval>
    17cc:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <__brkval+0x1>
    17d0:	e2 17       	cp	r30, r18
    17d2:	f3 07       	cpc	r31, r19
    17d4:	a0 f4       	brcc	.+40     	; 0x17fe <malloc+0x120>
    17d6:	2e 1b       	sub	r18, r30
    17d8:	3f 0b       	sbc	r19, r31
    17da:	28 17       	cp	r18, r24
    17dc:	39 07       	cpc	r19, r25
    17de:	78 f0       	brcs	.+30     	; 0x17fe <malloc+0x120>
    17e0:	ac 01       	movw	r20, r24
    17e2:	4e 5f       	subi	r20, 0xFE	; 254
    17e4:	5f 4f       	sbci	r21, 0xFF	; 255
    17e6:	24 17       	cp	r18, r20
    17e8:	35 07       	cpc	r19, r21
    17ea:	48 f0       	brcs	.+18     	; 0x17fe <malloc+0x120>
    17ec:	4e 0f       	add	r20, r30
    17ee:	5f 1f       	adc	r21, r31
    17f0:	50 93 44 02 	sts	0x0244, r21	; 0x800244 <__brkval+0x1>
    17f4:	40 93 43 02 	sts	0x0243, r20	; 0x800243 <__brkval>
    17f8:	81 93       	st	Z+, r24
    17fa:	91 93       	st	Z+, r25
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <malloc+0x124>
    17fe:	e0 e0       	ldi	r30, 0x00	; 0
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	cf 01       	movw	r24, r30
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	08 95       	ret

0000180e <free>:
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	09 f4       	brne	.+2      	; 0x1818 <free+0xa>
    1816:	81 c0       	rjmp	.+258    	; 0x191a <free+0x10c>
    1818:	fc 01       	movw	r30, r24
    181a:	32 97       	sbiw	r30, 0x02	; 2
    181c:	13 82       	std	Z+3, r1	; 0x03
    181e:	12 82       	std	Z+2, r1	; 0x02
    1820:	a0 91 45 02 	lds	r26, 0x0245	; 0x800245 <__flp>
    1824:	b0 91 46 02 	lds	r27, 0x0246	; 0x800246 <__flp+0x1>
    1828:	10 97       	sbiw	r26, 0x00	; 0
    182a:	81 f4       	brne	.+32     	; 0x184c <free+0x3e>
    182c:	20 81       	ld	r18, Z
    182e:	31 81       	ldd	r19, Z+1	; 0x01
    1830:	82 0f       	add	r24, r18
    1832:	93 1f       	adc	r25, r19
    1834:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <__brkval>
    1838:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <__brkval+0x1>
    183c:	28 17       	cp	r18, r24
    183e:	39 07       	cpc	r19, r25
    1840:	51 f5       	brne	.+84     	; 0x1896 <free+0x88>
    1842:	f0 93 44 02 	sts	0x0244, r31	; 0x800244 <__brkval+0x1>
    1846:	e0 93 43 02 	sts	0x0243, r30	; 0x800243 <__brkval>
    184a:	67 c0       	rjmp	.+206    	; 0x191a <free+0x10c>
    184c:	ed 01       	movw	r28, r26
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	ce 17       	cp	r28, r30
    1854:	df 07       	cpc	r29, r31
    1856:	40 f4       	brcc	.+16     	; 0x1868 <free+0x5a>
    1858:	4a 81       	ldd	r20, Y+2	; 0x02
    185a:	5b 81       	ldd	r21, Y+3	; 0x03
    185c:	9e 01       	movw	r18, r28
    185e:	41 15       	cp	r20, r1
    1860:	51 05       	cpc	r21, r1
    1862:	f1 f0       	breq	.+60     	; 0x18a0 <free+0x92>
    1864:	ea 01       	movw	r28, r20
    1866:	f5 cf       	rjmp	.-22     	; 0x1852 <free+0x44>
    1868:	d3 83       	std	Z+3, r29	; 0x03
    186a:	c2 83       	std	Z+2, r28	; 0x02
    186c:	40 81       	ld	r20, Z
    186e:	51 81       	ldd	r21, Z+1	; 0x01
    1870:	84 0f       	add	r24, r20
    1872:	95 1f       	adc	r25, r21
    1874:	c8 17       	cp	r28, r24
    1876:	d9 07       	cpc	r29, r25
    1878:	59 f4       	brne	.+22     	; 0x1890 <free+0x82>
    187a:	88 81       	ld	r24, Y
    187c:	99 81       	ldd	r25, Y+1	; 0x01
    187e:	84 0f       	add	r24, r20
    1880:	95 1f       	adc	r25, r21
    1882:	02 96       	adiw	r24, 0x02	; 2
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	93 83       	std	Z+3, r25	; 0x03
    188e:	82 83       	std	Z+2, r24	; 0x02
    1890:	21 15       	cp	r18, r1
    1892:	31 05       	cpc	r19, r1
    1894:	29 f4       	brne	.+10     	; 0x18a0 <free+0x92>
    1896:	f0 93 46 02 	sts	0x0246, r31	; 0x800246 <__flp+0x1>
    189a:	e0 93 45 02 	sts	0x0245, r30	; 0x800245 <__flp>
    189e:	3d c0       	rjmp	.+122    	; 0x191a <free+0x10c>
    18a0:	e9 01       	movw	r28, r18
    18a2:	fb 83       	std	Y+3, r31	; 0x03
    18a4:	ea 83       	std	Y+2, r30	; 0x02
    18a6:	49 91       	ld	r20, Y+
    18a8:	59 91       	ld	r21, Y+
    18aa:	c4 0f       	add	r28, r20
    18ac:	d5 1f       	adc	r29, r21
    18ae:	ec 17       	cp	r30, r28
    18b0:	fd 07       	cpc	r31, r29
    18b2:	61 f4       	brne	.+24     	; 0x18cc <free+0xbe>
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	84 0f       	add	r24, r20
    18ba:	95 1f       	adc	r25, r21
    18bc:	02 96       	adiw	r24, 0x02	; 2
    18be:	e9 01       	movw	r28, r18
    18c0:	99 83       	std	Y+1, r25	; 0x01
    18c2:	88 83       	st	Y, r24
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	e0 e0       	ldi	r30, 0x00	; 0
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	12 96       	adiw	r26, 0x02	; 2
    18d2:	8d 91       	ld	r24, X+
    18d4:	9c 91       	ld	r25, X
    18d6:	13 97       	sbiw	r26, 0x03	; 3
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	19 f0       	breq	.+6      	; 0x18e2 <free+0xd4>
    18dc:	fd 01       	movw	r30, r26
    18de:	dc 01       	movw	r26, r24
    18e0:	f7 cf       	rjmp	.-18     	; 0x18d0 <free+0xc2>
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	9d 01       	movw	r18, r26
    18ea:	2e 5f       	subi	r18, 0xFE	; 254
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <__brkval>
    18f6:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <__brkval+0x1>
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	69 f4       	brne	.+26     	; 0x191a <free+0x10c>
    1900:	30 97       	sbiw	r30, 0x00	; 0
    1902:	29 f4       	brne	.+10     	; 0x190e <free+0x100>
    1904:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__flp+0x1>
    1908:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <__flp>
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <free+0x104>
    190e:	13 82       	std	Z+3, r1	; 0x03
    1910:	12 82       	std	Z+2, r1	; 0x02
    1912:	b0 93 44 02 	sts	0x0244, r27	; 0x800244 <__brkval+0x1>
    1916:	a0 93 43 02 	sts	0x0243, r26	; 0x800243 <__brkval>
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <__do_global_dtors>:
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	c4 e3       	ldi	r28, 0x34	; 52
    1924:	d0 e0       	ldi	r29, 0x00	; 0
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <__do_global_dtors+0x10>
    1928:	fe 01       	movw	r30, r28
    192a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__tablejump2__>
    192e:	21 96       	adiw	r28, 0x01	; 1
    1930:	c5 33       	cpi	r28, 0x35	; 53
    1932:	d1 07       	cpc	r29, r17
    1934:	c9 f7       	brne	.-14     	; 0x1928 <__do_global_dtors+0x8>
    1936:	f8 94       	cli

00001938 <__stop_program>:
    1938:	ff cf       	rjmp	.-2      	; 0x1938 <__stop_program>
